#!/usr/bin/executor

конст КОДИРОВКА = "UTF-8"

@Глобально
метод СоздатьИнформационнуюБазу(СтрокаСоединения: Строка, ИмяФайлаПлатформы: Строка)

    пер ПараметрыПроцесса = новый Массив<Строка>()
    ПараметрыПроцесса.Добавить("CREATEINFOBASE")
    ПараметрыПроцесса.Добавить(СтрокаСоединения)

    ВыполнитьКомандуПлатформыСОжиданием(ИмяФайлаПлатформы, ПараметрыПроцесса)

    Консоль.Записать("ИБ успешно создана")
;

@Глобально
метод ЗагрузитьКонфигурацию(ПутьКФайлуСборки: Строка, СтрокаСоединения: Строка, ИмяФайлаПлатформы: Строка,
            ИмяПользователя: Строка = "", Пароль: Строка = "", ИмяРасширения: Строка = "")
    
    пер ПараметрыПроцесса = новый Массив<Строка>()
    ПараметрыПроцесса.Добавить("DESIGNER")
    ПараметрыПроцесса.Добавить("/LoadCfg")
    ПараметрыПроцесса.Добавить("\"%ПутьКФайлуСборки\"")
    если не ИмяРасширения.Пусто()
        ПараметрыПроцесса.Добавить("-Extension")
        ПараметрыПроцесса.Добавить(ИмяРасширения)
    ;
    ПараметрыПроцесса.Добавить("/IBConnectionString")
    ПараметрыПроцесса.Добавить(СтрокаСоединения)
    ПараметрыПроцесса.Добавить("/DisableStartupDialogs")
    ПараметрыПроцесса.Добавить("/WA-")
    если не ИмяПользователя.Пусто()
        ПараметрыПроцесса.Добавить("/N")
        ПараметрыПроцесса.Добавить("\"%ИмяПользователя\"")
    ;
    если не Пароль.Пусто()
        ПараметрыПроцесса.Добавить("/P")
        ПараметрыПроцесса.Добавить(Пароль)
    ;

    ВыполнитьКомандуПлатформыСОжиданием(ИмяФайлаПлатформы, ПараметрыПроцесса)

    Консоль.Записать("Файл успешно загружен: %ПутьКФайлуСборки")
;

@Глобально
метод ЗагрузитьФайлыКонфигурации(ПутьКФайламПроекта: Строка, СтрокаСоединения: Строка, ИмяФайлаПлатформы: Строка,
                    ИмяПользователя: Строка = "", Пароль: Строка = "", ИмяРасширения: Строка = "", ФайлыДляЗагрузки: Файл|Неопределено = Неопределено)
    
    пер ПараметрыПроцесса = новый Массив<Строка>()

    ПараметрыПроцесса.Добавить("DESIGNER")
    ПараметрыПроцесса.Добавить("/LoadConfigFromFiles")
    ПараметрыПроцесса.Добавить("\"%ПутьКФайламПроекта\"")
    если не ИмяРасширения.Пусто()
        ПараметрыПроцесса.Добавить("-Extension")
        ПараметрыПроцесса.Добавить(ИмяРасширения)
    ;
    если не ФайлыДляЗагрузки == Неопределено
        ПараметрыПроцесса.Добавить("-listFile")
        ПараметрыПроцесса.Добавить(ФайлыДляЗагрузки.Путь)
        ПараметрыПроцесса.Добавить("-NoCheck ")
    ;
    ПараметрыПроцесса.Добавить("/IBConnectionString")
    ПараметрыПроцесса.Добавить(СтрокаСоединения)
    ПараметрыПроцесса.Добавить("/DisableStartupDialogs")
    ПараметрыПроцесса.Добавить("/WA-")
    если не ИмяПользователя.Пусто()
        ПараметрыПроцесса.Добавить("/N")
        ПараметрыПроцесса.Добавить("\"%ИмяПользователя\"")
    ;
    если не Пароль.Пусто()
        ПараметрыПроцесса.Добавить("/P")
        ПараметрыПроцесса.Добавить(Пароль)
    ;

    ВыполнитьКомандуПлатформыСОжиданием(ИмяФайлаПлатформы, ПараметрыПроцесса)

    Консоль.Записать("XML файлы успешно загружены в ИБ")
;

@Глобально
метод ВыгрузитьКонфигурацию(ПутьКФайлуСборки: Строка, СтрокаСоединения: Строка, ИмяФайлаПлатформы: Строка,
            ИмяПользователя: Строка = "", Пароль: Строка = "", ИмяРасширения: Строка = "")
    
    пер ПараметрыПроцесса = новый Массив<Строка>()
    ПараметрыПроцесса.Добавить("DESIGNER")
    ПараметрыПроцесса.Добавить("/DumpCfg")
    ПараметрыПроцесса.Добавить("\"%ПутьКФайлуСборки\"")
    если не ИмяРасширения.Пусто()
        ПараметрыПроцесса.Добавить("-Extension")
        ПараметрыПроцесса.Добавить(ИмяРасширения)
    ;
    ПараметрыПроцесса.Добавить("/IBConnectionString")
    ПараметрыПроцесса.Добавить(СтрокаСоединения)
    ПараметрыПроцесса.Добавить("/DisableStartupDialogs")
    ПараметрыПроцесса.Добавить("/WA-")
    если не ИмяПользователя.Пусто()
        ПараметрыПроцесса.Добавить("/N")
        ПараметрыПроцесса.Добавить("\"%ИмяПользователя\"")
    ;
    если не Пароль.Пусто()
        ПараметрыПроцесса.Добавить("/P")
        ПараметрыПроцесса.Добавить(Пароль)
    ;

    ВыполнитьКомандуПлатформыСОжиданием(ИмяФайлаПлатформы, ПараметрыПроцесса)

    Консоль.Записать("Файл успешно создан: %ПутьКФайлуСборки")
;

@Глобально
метод ВыгрузитьФайлыКонфигурации(ПутьКФайламПроекта: Строка, СтрокаСоединения: Строка, ИмяФайлаПлатформы: Строка,
            ИмяПользователя: Строка = "", Пароль: Строка = "", ИмяРасширения: Строка = "", ТолькоDumpConfig = Ложь, ФайлыДляВыгрузки: Файл|Неопределено = Неопределено)
    
    пер ПараметрыПроцесса = новый Массив<Строка>()
    ПараметрыПроцесса.Добавить("DESIGNER")
    ПараметрыПроцесса.Добавить("/DumpConfigToFiles")
    ПараметрыПроцесса.Добавить("\"%ПутьКФайламПроекта\"")
    если ТолькоDumpConfig
        ПараметрыПроцесса.Добавить("-configDumpInfoOnly")
    ;
    если не ФайлыДляВыгрузки == Неопределено
        ПараметрыПроцесса.Добавить("-listFile")
        ПараметрыПроцесса.Добавить(ФайлыДляВыгрузки.Путь)
    ;
    если не ИмяРасширения.Пусто()
        ПараметрыПроцесса.Добавить("-Extension")
        ПараметрыПроцесса.Добавить(ИмяРасширения)
    ;
    ПараметрыПроцесса.Добавить("/IBConnectionString")
    ПараметрыПроцесса.Добавить(СтрокаСоединения)
    ПараметрыПроцесса.Добавить("/DisableStartupDialogs")
    ПараметрыПроцесса.Добавить("/WA-")
    если не ИмяПользователя.Пусто()
        ПараметрыПроцесса.Добавить("/N")
        ПараметрыПроцесса.Добавить("\"%ИмяПользователя\"")
    ;
    если не Пароль.Пусто()
        ПараметрыПроцесса.Добавить("/P")
        ПараметрыПроцесса.Добавить(Пароль)
    ;

    ВыполнитьКомандуПлатформыСОжиданием(ИмяФайлаПлатформы, ПараметрыПроцесса)

    Консоль.Записать("XML файлы успешно выгружены: %ПутьКФайламПроекта")
;

@Глобально
метод СравнитьКонфигурации(ПутьКФайлуОтчета: Строка, СтрокаСоединения: Строка, ИмяФайлаПлатформы: Строка,
                    ИмяПользователя: Строка = "", Пароль: Строка = "")
    
    пер ПараметрыПроцесса = новый Массив<Строка>()

    ПараметрыПроцесса.Добавить("DESIGNER")
    ПараметрыПроцесса.Добавить("/IBConnectionString")
    ПараметрыПроцесса.Добавить(СтрокаСоединения)
    ПараметрыПроцесса.Добавить("/DisableStartupDialogs")
    ПараметрыПроцесса.Добавить("/WA-")
    если не ИмяПользователя.Пусто()
        ПараметрыПроцесса.Добавить("/N")
        ПараметрыПроцесса.Добавить("\"%ИмяПользователя\"")
    ;
    если не Пароль.Пусто()
        ПараметрыПроцесса.Добавить("/P")
        ПараметрыПроцесса.Добавить(Пароль)
    ;

    ПараметрыПроцесса.Добавить("/CompareCfg")
    ПараметрыПроцесса.Добавить("-FirstConfigurationType")
    ПараметрыПроцесса.Добавить("MainConfiguration")
    ПараметрыПроцесса.Добавить("-SecondConfigurationType")
    ПараметрыПроцесса.Добавить("DBConfiguration")
    ПараметрыПроцесса.Добавить("-ReportType")
    ПараметрыПроцесса.Добавить("Full")
    ПараметрыПроцесса.Добавить("-IncludeChangedObjects")
    ПараметрыПроцесса.Добавить("-IncludeDeletedObjects")
    ПараметрыПроцесса.Добавить("-IncludeAddedObjects")
    ПараметрыПроцесса.Добавить("-ReportFormat")
    ПараметрыПроцесса.Добавить("mxl")
    ПараметрыПроцесса.Добавить("-ReportFile")
    ПараметрыПроцесса.Добавить(ПутьКФайлуОтчета)

    ВыполнитьКомандуПлатформыСОжиданием(ИмяФайлаПлатформы, ПараметрыПроцесса)

    Консоль.Записать("Файл сравнение основной конфигурации и конфигурации БД успешно получен")
;

@Локально
метод ВыполнитьКомандуПлатформыСОжиданием(имяКоманды: Строка, параметры: Массив<Строка>, таймаут: Длительность = 0с)
    
    знч временныйФайлЛогов = Файлы.СоздатьВременныйФайл()
    знч временныйФайлКодВозврата = Файлы.СоздатьВременныйФайл()
    
    параметры.Добавить("/Out")
    параметры.Добавить(временныйФайлЛогов.Путь)
    параметры.Добавить("/DumpResult")
    параметры.Добавить(временныйФайлКодВозврата.Путь)
    
    знч параметрыСтрокой = Строки.Соединить(параметры, " ")
    Консоль.Записать("=================================================================")
    Консоль.Записать("\"%имяКоманды\" %параметрыСтрокой")
    Консоль.Записать("=================================================================")
    пер процесс = новый ПроцессОс(имяКоманды, параметры)
    процесс.Запустить()

    пер времяОжидания = 0с
    пер кодВозврата = Неопределено
    
    пока не процесс.ОжидатьЗавершения(60с) и процесс.Живой()
        ВывестиЛогаИзФайла(временныйФайлЛогов, КОДИРОВКА)
        кодВозврата = ПолучитьКодВозвратаИзФайла(временныйФайлКодВозврата)
        
        если кодВозврата != Неопределено
            процесс.ОжидатьЗавершения(10с)
            прервать
        ;

        если таймаут != 0с и таймаут <= времяОжидания
            пер текстОшибки = "При выполнении команды платформы превышено время ожидания выполнения %таймаут"
            процесс.Остановить()
            выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
        ;
        времяОжидания += 60с
    ;
    
    ВывестиЛогаИзФайла(временныйФайлЛогов, КОДИРОВКА, Истина)
    кодВозврата = ПолучитьКодВозвратаИзФайла(временныйФайлКодВозврата)
        
    если процесс.Живой()
        процесс.Остановить()
    ;

    если кодВозврата == 0 или кодВозврата == Неопределено
        возврат
    ;

    Консоль.Записать("Код возврата: %кодВозврата")

    выбросить новый ИсключениеНедопустимоеСостояние()
;

@Локально
метод ВывестиЛогаИзФайла(файлЛога: Файл, кодировкаЛога: Строка, удалитьЛог: Булево = Ложь)
    
    если не файлЛога.Существует()
        возврат
    ;
    
    исп потокЛога = файлЛога.ОткрытьПотокЧтения()
    знч текстЛога = потокЛога.ПрочитатьКакСтроку(кодировкаЛога)
    пер строкиЛога = текстЛога.Разделить(Символы.НОВАЯ_СТРОКА)
    для строкаЛога из строкиЛога
        если строкаЛога.Пусто()
            продолжить
        ;
        Консоль.Записать(строкаЛога)
    ;
    
    если удалитьЛог
        Файлы.Удалить(файлЛога)
    ;
;

@Локально
метод ПолучитьКодВозвратаИзФайла(файлКодаВозврата: Файл): Число|Строка?
    если не файлКодаВозврата.Существует()
        возврат Неопределено
    ;

    исп потокКодаВозврата = файлКодаВозврата.ОткрытьПотокЧтения()
    пер кодВозврата = потокКодаВозврата.ПрочитатьКакСтроку()
    если кодВозврата.Пусто()
        возврат Неопределено
    ;
    
    если кодВозврата.ТолькоЦифры()
        возврат новый Число(кодВозврата)
    ;
    
    возврат кодВозврата.Подстрока(1)
;