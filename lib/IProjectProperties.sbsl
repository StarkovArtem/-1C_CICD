#!/usr/bin/executor

#требуется oc_main.sbsl
#требуется ILogging.sbsl
#требуется IConfiguration.sbsl

конст ИМЯ_ФАЙЛА_НАСТРОЕК = "project_config.json"
конст ИМЯ_ФАЙЛА_ПОЛЬЗ_НАСТРОЕК = "project_user_prop.json" // файл пользовательских настроек в каталоге BIN_DIR
@Глобально
конст ИМЯ_КАТАЛОГА_ПАТЧА = "cf_patch"
@Глобально
конст ИМЯ_КАТАЛОГА_КОНФИГУРАЦИИ = "cf"
@Глобально
конст ИМЯ_КАТАЛОГА_РАСШИРЕНИЙ = "cfe"
@Глобально
конст ИМЯ_КАТАЛОГА_КОНФИГУРАЦИИ_ПОСТАВЩИКА = "cf_prod"
конст ИМЯ_ВРЕМЕННОГО_КАТАЛОГА = ".1ccicd"
конст ИМЯ_КАТАЛОГА_ИСХОДНИКОВ = "src"
конст ИМЯ_КАТАЛОГА_СБОРКИ = "bin"

@Глобально
структура Настройки

    знч EXT_NAMES: Массив<Строка> // Имена расширений
    знч BIN_DIR: Строка           // Каталог, в котором соберутся файлы cf и cfe
    знч SRC_CF: Строка            // Каталог выгрузки файлов конфигурации в формате xml
    знч SRC_CFE: Строка           // Каталог выгрузки файлов расширений в формате xml
    знч PLATFORM_VERSION: Строка  // Версия платформы

    @Глобально
    статический метод Прочитать(): Настройки

        пер ФайлНастроек = новый Файл(ИМЯ_ФАЙЛА_НАСТРОЕК)
        если не ФайлНастроек.Существует()
            Записать("")
        ;
        исп ПотокЧтения = ФайлНастроек.ОткрытьПотокЧтения()
        знч ПрочитанныеНастройки = СериализацияJson.ПрочитатьОбъект(ПотокЧтения, Тип<Настройки>)
        ПотокЧтения.Закрыть()

        возврат ПрочитанныеНастройки
    ;

    @Глобально
    статический метод Записать(ВерсияПлатформы: Строка) : Булево
        
        знч СР = Файлы.СимволРазделителя
        пер ФайлНастроек = новый Файл(ИМЯ_ФАЙЛА_НАСТРОЕК)
        знч Настройки = новый Настройки(
            {"*"}.ВМассив(),
            "%{ИМЯ_КАТАЛОГА_СБОРКИ}",
            "%{ИМЯ_КАТАЛОГА_ИСХОДНИКОВ}%{СР}%{ИМЯ_КАТАЛОГА_КОНФИГУРАЦИИ}",
            "%{ИМЯ_КАТАЛОГА_ИСХОДНИКОВ}%{СР}%{ИМЯ_КАТАЛОГА_РАСШИРЕНИЙ}",
            "%{ВерсияПлатформы}"
        )

        исп ПотокЗаписи = ФайлНастроек.ОткрытьПотокЗаписи()
        СериализацияJson.ЗаписатьОбъект(ПотокЗаписи, Настройки)
        ПотокЗаписи.Закрыть()

        возврат Истина
    ;
;

@Глобально
структура ПользовательскиеНастройки

    пер HASH: Соответствие<Строка, Строка>
    знч IB_CONNECTION_STRING: Строка
    пер IB_LOGIN: Строка
    пер IB_PASSWD: Строка
    знч TEMP: Строка
    знч CFE_BUILD_MODE: Число // 1 - собирать расширения в пустой конфигурации, 2 - собирать расширения относительно основной конфигурации
    знч EXEC_MODE: Число      // 1 - 1сv8, 2 - ibsrv, 3 - ssh
    знч CFE_EXEC_MODE: Число  // 1 - 1сv8, 2 - ibsrv, 3 - ssh
    знч PATH_1C: Строка

    @Глобально
    статический метод Прочитать(ПутьКНастройкам: ПутьКФайламПроекта, ВвестиЛогинПароль = Ложь): ПользовательскиеНастройки
        
        знч СР = Файлы.СимволРазделителя
        знч ФайлНастроек = новый Файл("%{ПутьКНастройкам.Путь}%{СР}%ИМЯ_ФАЙЛА_ПОЛЬЗ_НАСТРОЕК")
        пер ПользовательскиеНастройки = новый ПользовательскиеНастройки(
            новый Соответствие<Строка, Строка>(),
            "",
            "",
            "",
            "%{ИМЯ_КАТАЛОГА_СБОРКИ}%{СР}%{ИМЯ_ВРЕМЕННОГО_КАТАЛОГА}",
            2,
            1,
            1,
            ""
        )
        если не ФайлНастроек.Существует()
            Файлы.СоздатьКаталог("%{ПутьКНастройкам.Путь}")
            исп ПотокЗаписи = ФайлНастроек.ОткрытьПотокЗаписи()
            СериализацияJson.ЗаписатьОбъект(ПотокЗаписи, ПользовательскиеНастройки)
            ПотокЗаписи.Закрыть()
        иначе
            исп ПотокЧтения = ФайлНастроек.ОткрытьПотокЧтения()
            ПользовательскиеНастройки = СериализацияJson.ПрочитатьОбъект(ПотокЧтения, Тип<ПользовательскиеНастройки>)
            ПотокЧтения.Закрыть()
        ;

        если ВвестиЛогинПароль и не ПользовательскиеНастройки.IB_CONNECTION_STRING.Пусто() и ПользовательскиеНастройки.IB_LOGIN.Пусто()
            ПользовательскиеНастройки.IB_LOGIN = Консоль.СчитатьСтроку("Введите логин:\н")
        ;

        если ВвестиЛогинПароль и не ПользовательскиеНастройки.IB_LOGIN.Пусто() и ПользовательскиеНастройки.IB_PASSWD.Пусто()
            ПользовательскиеНастройки.IB_PASSWD = Консоль.СчитатьПароль("Введите пароль:\н")
        ;

        возврат ПользовательскиеНастройки
    ;

    @Глобально
    статический метод Записать(ПараметрыПроекта: ПараметрыПроекта)

        знч СР = Файлы.СимволРазделителя

        знч Хеши = новый Соответствие<Строка, Строка>()
        Хеши.Вставить(ИМЯ_КАТАЛОГА_КОНФИГУРАЦИИ, ПараметрыПроекта.ПутьКФайламКонфигурации.Хеш)
        Хеши.Вставить(ИМЯ_КАТАЛОГА_КОНФИГУРАЦИИ_ПОСТАВЩИКА, ПараметрыПроекта.ПутьКФайламКонфигурацииПоставщика.Хеш)
        для Расширение из ПараметрыПроекта.Расширения
            Хеши.Вставить(Расширение.Ключ, Расширение.Значение.Хеш)
        ;

        знч ПредыдущиеПользовательскиеНастройки = ПользовательскиеНастройки.Прочитать(ПараметрыПроекта.ПутьКСборкеПроекта, Ложь)

        знч ПользовательскиеНастройки = новый ПользовательскиеНастройки(
            Хеши,
            ПараметрыПроекта.ПараметрыСоединенияИБ.СтрокаСоединения,
            ПараметрыПроекта.ПараметрыСоединенияИБ.Логин,
            ПараметрыПроекта.ПараметрыСоединенияИБ.Пароль,
            ПараметрыПроекта.ПутьКВременнымФайлам.ОтносительныйПуть,
            ПараметрыПроекта.РежимСборкиПроектаРасширения.Индекс + 1,
            ПараметрыПроекта.РежимИСполнения.Индекс + 1,
            ПараметрыПроекта.РежимИСполненияРасширения.Индекс + 1,
            ПредыдущиеПользовательскиеНастройки.PATH_1C
        )

        исп ПотокЗаписи = новый Файл("%{ПараметрыПроекта.ПутьКСборкеПроекта.Путь}%{СР}%ИМЯ_ФАЙЛА_ПОЛЬЗ_НАСТРОЕК").ОткрытьПотокЗаписи()
        СериализацияJson.ЗаписатьОбъект(ПотокЗаписи, ПользовательскиеНастройки)
        ПотокЗаписи.Закрыть()

    ;
;

@Глобально
структура ПараметрыСоединенияИБ

    пер СтрокаСоединения: Строка
    пер Логин: Строка
    пер Пароль: Строка
;

@Глобально
структура ПутьКФайламПроекта

    знч Имя: Строка
    знч Путь: Строка
    знч ОтносительныйПуть: Строка
    знч ЭтоРасширение: Булево
    пер Хеш: Строка
;

@Глобально
перечисление РежимыСборкиПроекта

    ВПустойКонфигурации
    ВОсновнойКонфигурации

;

@Глобально
структура ПараметрыПроекта

    знч РабочийКаталог: Строка                               // Рабочий каталог выполнения скрипта
    знч ПутьКСкриптуИсполнения: ПутьКФайламПроекта
    знч ПутьКСборкеПроекта: ПутьКФайламПроекта                // Путь к собранным файлам проекта
    знч ПутьКФайламКонфигурации: ПутьКФайламПроекта           // Путь к исходным файлам конфигурации проекта
    пер ФайлВерсийКонфигурации: Файл | Неопределено
    знч ПутьКФайламКонфигурацииПоставщика: ПутьКФайламПроекта // Путь к исходным файлам конфигурации поставщика проекта
    знч ПутьКВременнымФайлам: ПутьКФайламПроекта              // Путь к временным файлам конфигурации поставщика проекта
    знч Расширения: Соответствие<Строка, ПутьКФайламПроекта>  // Путь к исходным файлам расширений проекта
    знч РежимСборкиПроектаРасширения: РежимыСборкиПроекта
                    = РежимыСборкиПроекта.ВПустойКонфигурации // Режим сборки бинарный файлов проекта
    знч РежимИСполнения: oc_main.РежимыИсполнения
                    = oc_main.РежимыИсполнения.Платформа      // Режим запуска сборки файлов проекта
    знч РежимИСполненияРасширения: oc_main.РежимыИсполнения
                    = oc_main.РежимыИсполнения.Платформа      // Режим запуска сборки файлов расширения проекта
    знч ПутьКФайламПлатформы: Строка                          // Путь к исполняемым файлу платформы
    знч ПараметрыСоединенияИБ: ПараметрыСоединенияИБ

    @Глобально
    статический метод Инициализировать(ВвестиЛогинПароль = Ложь) : ПараметрыПроекта

        знч СР = Файлы.СимволРазделителя
        
        знч Настройки = Настройки.Прочитать()
        знч РабочийКаталог = Скрипт.ПолучитьРабочийКаталог()

        пер ПутьКСкриптуИсполненияСтрокой = Скрипт.ПутьНачальногоСкрипта.Заменить(РабочийКаталог, "")
        если ПутьКСкриптуИсполненияСтрокой.НачинаетсяС(СР)
            ПутьКСкриптуИсполненияСтрокой = ПутьКСкриптуИсполненияСтрокой.Подстрока(1)
        ;

        знч ПутьКСкриптуИсполнения = новый ПутьКФайламПроекта(
            "",
            Скрипт.ПутьНачальногоСкрипта,
            ПутьКСкриптуИсполненияСтрокой,
            Ложь,
            "")
        
        пер ПутьКСборкеПроектаСтрокой = (РабочийКаталог + СР + Настройки.BIN_DIR + СР)
            .Заменить("\\", СР)
            .Заменить("/", СР)

        знч ПутьКСборкеПроекта = новый ПутьКФайламПроекта(
            "",
            ПутьКСборкеПроектаСтрокой,
            Настройки.BIN_DIR + СР,
            Ложь,
            "")

        знч ПользовательскиеНастройки = ПользовательскиеНастройки.Прочитать(ПутьКСборкеПроекта, ВвестиЛогинПароль)
        
        пер ПутьКФайламКонфигурацииСтрокой = ""
        если не Настройки.SRC_CF.Пусто() 
            ПутьКФайламКонфигурацииСтрокой = (РабочийКаталог + СР + Настройки.SRC_CF + СР)
                .Заменить("\\", СР)
                .Заменить("/", СР)
        ;
        знч ПутьКФайламКонфигурации = новый ПутьКФайламПроекта(
            "",
            ПутьКФайламКонфигурацииСтрокой,
            Настройки.SRC_CF + СР,
            Ложь,
            ПользовательскиеНастройки.HASH.ПолучитьИлиУмолчание(ИМЯ_КАТАЛОГА_КОНФИГУРАЦИИ, ""))

        пер ПутьКФайламКонфигурацииПоставщикаСтрокой = ""
        если не Настройки.SRC_CF.Пусто() 
            ПутьКФайламКонфигурацииПоставщикаСтрокой = (РабочийКаталог + СР + Настройки.BIN_DIR + СР + "prod" + СР)
                .Заменить("\\", СР)
                .Заменить("/", СР)
        ;
        знч ПутьКФайламКонфигурацииПоставщика = новый ПутьКФайламПроекта(
            "",
            ПутьКФайламКонфигурацииПоставщикаСтрокой,
            Настройки.BIN_DIR + СР + "prod" + СР,
            Ложь,
            ПользовательскиеНастройки.HASH.ПолучитьИлиУмолчание(ИМЯ_КАТАЛОГА_КОНФИГУРАЦИИ_ПОСТАВЩИКА, ""))

        знч ПутиКФайламРасширений = новый Соответствие<Строка, ПутьКФайламПроекта>()
        если не Настройки.SRC_CFE.Пусто() 
            пер ПутьКФайламРасширенийСтрокой = (РабочийКаталог + СР + Настройки.SRC_CFE)
                .Заменить("\\", СР)
                .Заменить("/", СР)
            для ИмяРасширения из Настройки.EXT_NAMES
                если ИмяРасширения == ИМЯ_КАТАЛОГА_КОНФИГУРАЦИИ
                    или ИмяРасширения == ИМЯ_КАТАЛОГА_КОНФИГУРАЦИИ_ПОСТАВЩИКА
                    или ИмяРасширения == ИМЯ_КАТАЛОГА_ПАТЧА
                    продолжить
                ;
                знч ПутьКФайламПроекта = новый ПутьКФайламПроекта(
                    ИмяРасширения,
                    ПутьКФайламРасширенийСтрокой + СР + ИмяРасширения + СР,
                    Настройки.SRC_CFE + СР + ИмяРасширения + СР,
                    Истина,
                    ПользовательскиеНастройки.HASH.ПолучитьИлиУмолчание(ИмяРасширения, "")
                )
                ПутиКФайламРасширений.Вставить(ИмяРасширения, ПутьКФайламПроекта)
            ;
        ;

        пер ПутьКВременнымФайламСтрокой = ""
        пер ОтносительныйПутьКВременнымФайламСтрокой = ПользовательскиеНастройки.TEMP
        если ОтносительныйПутьКВременнымФайламСтрокой.Пусто()
            ОтносительныйПутьКВременнымФайламСтрокой = "%{ИМЯ_КАТАЛОГА_СБОРКИ}%{СР}%{ИМЯ_ВРЕМЕННОГО_КАТАЛОГА}"
        ;
        если ОтносительныйПутьКВременнымФайламСтрокой.Содержит(":")
            ПутьКВременнымФайламСтрокой = (ОтносительныйПутьКВременнымФайламСтрокой + СР)
                .Заменить("\\", СР)
                .Заменить("/", СР)
        иначе
            ПутьКВременнымФайламСтрокой = (РабочийКаталог + СР + ОтносительныйПутьКВременнымФайламСтрокой + СР)
                .Заменить("\\", СР)
                .Заменить("/", СР)
        
        ;

        знч ПутьКВременнымФайлам = новый ПутьКФайламПроекта(
            "",
            ПутьКВременнымФайламСтрокой,
            ОтносительныйПутьКВременнымФайламСтрокой,
            Ложь,
            "")

        знч ПараметрыСоединенияИБ = новый ПараметрыСоединенияИБ(
            ПользовательскиеНастройки.IB_CONNECTION_STRING,
            ПользовательскиеНастройки.IB_LOGIN,
            ПользовательскиеНастройки.IB_PASSWD)

        Консоль.Записать("ИсполняемыйФайлПлатформы: %{Настройки.PLATFORM_VERSION}")

        знч ПутьКФайламПлатформы = oc_main.ПутьКФайламПлатформы(Настройки.PLATFORM_VERSION, ПользовательскиеНастройки.PATH_1C) + СР

        знч ПараметрыПроекта = новый ПараметрыПроекта(
            РабочийКаталог + СР,
            ПутьКСкриптуИсполнения,
            ПутьКСборкеПроекта,
            ПутьКФайламКонфигурации,
            IConfiguration.ПолучитьФайлConfigDumpInfo(ПутьКВременнымФайлам.Путь),
            ПутьКФайламКонфигурацииПоставщика,
            ПутьКВременнымФайлам,
            ПутиКФайламРасширений,
            РежимыСборкиПроекта.Элементы()[ПользовательскиеНастройки.CFE_BUILD_MODE - 1],
            oc_main.РежимыИсполнения.Элементы()[ПользовательскиеНастройки.EXEC_MODE - 1],
            oc_main.РежимыИсполнения.Элементы()[ПользовательскиеНастройки.CFE_EXEC_MODE - 1],
            ПутьКФайламПлатформы,
            ПараметрыСоединенияИБ)

        возврат ПараметрыПроекта
    ;

    @Глобально
    статический метод Записать(ПараметрыПроекта: ПараметрыПроекта)

        ПользовательскиеНастройки.Записать(ПараметрыПроекта)
    ;
;