#!/usr/bin/executor

#требуется IConfigurationProperties.sbsl

// ПрограмнныйИнтерфейс

@Глобально
метод ПеревестиВНовыйФорматParentConfigurations(ПутьКФайламПроекта: Строка)

    знч ВремяИсполненияОпераций = новый ILogging.ВремяИсполненияОпераций()
    ВремяИсполненияОпераций.НачатьЗамер("ПеревестиВНовыйФорматParentConfigurations")

    знч СР = Файлы.СимволРазделителя
    знч ФайлИзменений   = ПолучитьФайлParentConfigurations(ПутьКФайламПроекта)
    если не ФайлИзменений.Существует()
        возврат
    ;
    пер ДанныеИзменения = ФайлИзменений.ОткрытьПотокЧтения().ПрочитатьКакСтроку()

    если ДанныеИзменения.Содержит(Символы.НОВАЯ_СТРОКА)
        возврат
    ;
    ДанныеИзменения = ДанныеИзменения.Заменить(",", "," + Символы.НОВАЯ_СТРОКА)

    ФайлИзменений.ОткрытьПотокЗаписи(Ложь).Записать(Байты{EF BB BF}).Записать(ДанныеИзменения).Закрыть()
    Консоль.Записать("\нИзменен файл %{ПутьКФайламПроекта}%{СР}Ext%{СР}ParentConfigurations.bin")

    ВремяИсполненияОпераций.ЗавершитьЗамер("ПеревестиВНовыйФорматParentConfigurations")

    возврат
;

@Глобально
метод ПеревестиВНовыйФорматConfigDumpInfo(ПутьКФайламПроекта: Строка)

    знч ВремяИсполненияОпераций = новый ILogging.ВремяИсполненияОпераций()
    ВремяИсполненияОпераций.НачатьЗамер("ПеревестиВНовыйФорматConfigDumpInfo")

    знч СР              = Файлы.СимволРазделителя
    знч ФайлИзменений   = ПолучитьФайлConfigDumpInfo(ПутьКФайламПроекта)
    если не ФайлИзменений.Существует()
        возврат
    ;
    пер ДанныеИзменения = ФайлИзменений.ОткрытьПотокЧтения().ПрочитатьКакСтроку()
    знч ОбразецЗамены   = новый Образец("configVersion=\".*\"")

    ДанныеИзменения = ДанныеИзменения.Заменить(ОбразецЗамены, "configVersion=\"0000000000000000000000000000000000000000\"")

    ФайлИзменений.ОткрытьПотокЗаписи(Ложь).Записать(Байты{EF BB BF}).Записать(ДанныеИзменения).Закрыть()
    Консоль.Записать("\нИзменен файл %{ПутьКФайламПроекта}%{СР}ConfigDumpInfo.xml")

    ВремяИсполненияОпераций.ЗавершитьЗамер("ПеревестиВНовыйФорматConfigDumpInfo")

    возврат
;

@Глобально
метод ИсправитьНастройкиПоддержки(СтруктураКонфигурации: IConfigurationProperties.СтруктураКонфигурации, ОбновитьФайл = Истина)

    если СтруктураКонфигурации.НастройкиПоддержки.НачальныеДанные.Размер() == 0
        возврат
    ;

    знч НастройкиПоддержкиТекст = новый Массив<Строка>()

    для НачальныеДанные из СтруктураКонфигурации.НастройкиПоддержки.НачальныеДанные
        НастройкиПоддержкиТекст.Добавить(НачальныеДанные)
    ;

    пер КоличествоИдентификаторов = 0
    знч ИндексСтрокиРазмера = 9
    пер ВывестиОшибкаИдентификаторов = Истина

    Консоль.Записать("\н")

    для КлючИЗначение из СтруктураКонфигурации.НастройкиПоддержки.Идентификаторы

        знч Идентификатор = КлючИЗначение.Значение

        если Идентификатор.Имя.Пусто()
            если ВывестиОшибкаИдентификаторов
                Консоль.Записать("\н*****************************************************************")
                Консоль.Записать("Ошибка идентификаторов bin")
                ВывестиОшибкаИдентификаторов = Ложь
            ;
            Консоль.Записать(Идентификатор.ГУИД)
            продолжить
        ;

        если не ВывестиОшибкаИдентификаторов
            Консоль.Записать("*****************************************************************")
            ВывестиОшибкаИдентификаторов = Истина
        ;

        если Идентификатор.Исправить
            Консоль.Записать("\н*****************************************************************")
            Консоль.Записать("Расхождение идентификатора")
            Консоль.Записать(Идентификатор.Имя)
            Консоль.Записать("%{Идентификатор.ГУИД} , %{Идентификатор.ГУИДПоставщика}")
            Консоль.Записать("*****************************************************************")
        ;

        если не Идентификатор.ПравилаПользователя == "0"
            Консоль.Записать(Идентификатор.Имя)
            Консоль.Записать(Идентификатор.ПравилаПользователя + ","
                            + Идентификатор.ПравилаПоставщика + ","
                            + Идентификатор.ГУИД + ","
                            + Идентификатор.ГУИДПоставщика)
        ;

        НастройкиПоддержкиТекст.Добавить(Идентификатор.ПравилаПользователя)
        НастройкиПоддержкиТекст.Добавить(Идентификатор.ПравилаПоставщика)
        НастройкиПоддержкиТекст.Добавить(Идентификатор.ГУИД)
        НастройкиПоддержкиТекст.Добавить(Идентификатор.ГУИДПоставщика)

        КоличествоИдентификаторов = КоличествоИдентификаторов + 1

    ;

    НастройкиПоддержкиТекст[ИндексСтрокиРазмера] = КоличествоИдентификаторов.ВСтроку()

    пер ВывестиНеНаходитсяНаПоддержке = Истина

    для КлючИЗначение из СтруктураКонфигурации.Метаданные
        знч ОбъектМетаданных = КлючИЗначение.Значение
        если не ОбъектМетаданных.Идентификатор.ГУИДПоставщика.Пусто()
            продолжить
        ;
        если ВывестиНеНаходитсяНаПоддержке
            Консоль.Записать("\н*****************************************************************")
            Консоль.Записать("Не находится на поддержке")
            ВывестиНеНаходитсяНаПоддержке = Ложь
        ;
        Консоль.Записать("%{ОбъектМетаданных.Имя} : %{ОбъектМетаданных.Идентификатор.ГУИД}")
    ;

    если не ВывестиНеНаходитсяНаПоддержке
        Консоль.Записать("*****************************************************************")
    ;

    для КонечныеДанные из СтруктураКонфигурации.НастройкиПоддержки.КонечныеДанные
        НастройкиПоддержкиТекст.Добавить(КонечныеДанные)
    ;

    если ОбновитьФайл
        знч ФайлИзменений   = ПолучитьФайлParentConfigurations(СтруктураКонфигурации.ПутьКФайламКонфигурации)
        ФайлИзменений.ОткрытьПотокЗаписи(Ложь).Записать(Байты{EF BB BF}).Записать(Строки.Соединить(НастройкиПоддержкиТекст, "," + Символы.НОВАЯ_СТРОКА)).Закрыть()
        Консоль.Записать("\нИзменен файл идентификаторов bin")
    ;

;

@Глобально
метод ПрочитатьСтруктуруКонфигурации(ПутьКФайламКонфигурации: Строка, РежимОбработки: IConfigurationProperties.РежимОбработки, НастройкиПоддержкиИБ: IConfigurationProperties.НастройкиПоддержки|Неопределено = Неопределено) : IConfigurationProperties.СтруктураКонфигурации

    знч ВремяИсполненияОпераций = новый ILogging.ВремяИсполненияОпераций()
    ВремяИсполненияОпераций.НачатьЗамер("ПрочитатьСтруктуруКонфигурации")

    знч СтруктураКонфигурации = новый IConfigurationProperties.СтруктураКонфигурации(ПутьКФайламКонфигурации)
    СтруктураКонфигурации.НастройкиПоддержки = ПрочитатьНастройкиПоддержки(ПутьКФайламКонфигурации)

    если не НастройкиПоддержкиИБ == Неопределено
        СтруктураКонфигурации.НастройкиПоддержки.Дополнить(НастройкиПоддержкиИБ)
    ;

    знч ConfigDumpInfo = ПолучитьФайлConfigDumpInfo(ПутьКФайламКонфигурации)
    если не ConfigDumpInfo.Существует()
        возврат СтруктураКонфигурации
    ;

    СтруктураКонфигурации.Версия             = ПрочитатьВерсиюКонфигурации(ПутьКФайламКонфигурации)

    знч ПолучитьПоПоддержке = (РежимОбработки == IConfigurationProperties.РежимОбработки.ПолучитьПоПоддержке)
    пер Уровень = 0
    пер ДанныеОбъектаРодителя: IConfigurationProperties.ОбъектМетаданных

    исп ПотокЧтенияConfigDumpInfo = ConfigDumpInfo.ОткрытьПотокЧтения()
    знч ЧтениеXml = новый ЧтениеXml(ПотокЧтенияConfigDumpInfo)
    пока ЧтениеXml.Следующий()

        если (ЧтениеXml.Имя == "Metadata"
            и ЧтениеXml.ВидУзла == ВидУзлаXml.КонецЭлемента)
            Уровень -= 1
        ;
        если не (ЧтениеXml.Имя == "Metadata"
            и ЧтениеXml.ВидУзла == ВидУзлаXml.НачалоЭлемента)
            продолжить
        ;

        Уровень += 1

        знч ИмяМетаданных = ЧтениеXml.ЗначениеАтрибута("name")
        пер ГУИД          = ЧтениеXml.ЗначениеАтрибута("id")
        знч Версия        = ЧтениеXml.ЗначениеАтрибута("configVersion")
        знч СоставГУИД    = ГУИД.Разделить(".")
        знч СоставИмени   = ИмяМетаданных.Разделить(".")
        знч ЭтоРодитель   = (Уровень == 1) и (СоставГУИД.Размер() == 1) и (СоставИмени.Размер() == 2)
        пер Файлы         = новый Соответствие<Строка, Строка>()
        если (Уровень == 1) и (СоставГУИД.Размер() == 1)
            Файлы         = ПолучитьФайлыОбъектаМетаданных(ПутьКФайламКонфигурации, ИмяМетаданных)
        ;

        знч Идентификатор = СтруктураКонфигурации.НастройкиПоддержки.Идентификаторы.ПолучитьИлиУмолчание(
            СоставГУИД[0],
            новый IConfigurationProperties.Идентификатор(СоставГУИД[0],
            "",
            "",
            "1",
            "0"))

        Идентификатор.Имя = ИмяМетаданных

        знч ДанныеОбъекта = новый IConfigurationProperties.ОбъектМетаданных(
            Идентификатор,
            ИмяМетаданных,
            Версия == Неопределено ? "" : Версия,
            Ложь,
            Ложь,
            новый Массив<IConfigurationProperties.ОбъектМетаданных>(),
            Файлы
        )

        если ЭтоРодитель
            ДанныеОбъектаРодителя = ДанныеОбъекта
        иначе
            ДанныеОбъектаРодителя.Элементы.Добавить(ДанныеОбъекта)
            ДанныеОбъектаРодителя.ОтличаютсяПравилаПользователяПодчиненных =
                ДанныеОбъектаРодителя.ОтличаютсяПравилаПользователяПодчиненных
                или ДанныеОбъектаРодителя.Идентификатор.ПравилаПользователя !=
                    ДанныеОбъекта.Идентификатор.ПравилаПользователя
            ДанныеОбъектаРодителя.ОтличаютсяПравилаПоставщикаПодчиненных =
                ДанныеОбъектаРодителя.ОтличаютсяПравилаПоставщикаПодчиненных
                или ДанныеОбъектаРодителя.Идентификатор.ПравилаПоставщика !=
                    ДанныеОбъекта.Идентификатор.ПравилаПоставщика
        ;

        если ПолучитьПоПоддержке и Идентификатор.ПравилаПользователя == "0" и не ДанныеОбъектаРодителя.ОтличаютсяПравилаПользователяПодчиненных
            продолжить
        ;

        СтруктураКонфигурации.Метаданные.ВставитьЕслиОтсутствует(ДанныеОбъектаРодителя.Идентификатор.ГУИД, ДанныеОбъектаРодителя)
        СтруктураКонфигурации.Идентификаторы.ВставитьЕслиОтсутствует(Идентификатор.ГУИД, ДанныеОбъекта)

    ;

    ПотокЧтенияConfigDumpInfo.Закрыть()

    ВремяИсполненияОпераций.ЗавершитьЗамер("ПрочитатьСтруктуруКонфигурации")

    возврат СтруктураКонфигурации
;

@Глобально
метод ОбработатьФайлыКонфигурации(СтруктураКонфигурации: IConfigurationProperties.СтруктураКонфигурации, ПутьКФайламКонфигурации: Строка, ПутьКФайламРезультата: Строка, РежимОбработки: IConfigurationProperties.РежимОбработки)

    знч ВремяИсполненияОпераций = новый ILogging.ВремяИсполненияОпераций()
    ВремяИсполненияОпераций.НачатьЗамер("ОбработатьФайлыКонфигурации")

    знч СР = Файлы.СимволРазделителя
    пер ТекстФайлыДляЗагрузки = ""

    знч ПолучитьПоПоддержке = РежимОбработки == IConfigurationProperties.РежимОбработки.ПолучитьПоПоддержке
    знч ПолучитьФайлыКонфигурации = ПолучитьПоПоддержке и не ПутьКФайламРезультата.Пусто()

    знч ХешированиеДанныхКонфигурации = новый ХешированиеДанных(АлгоритмХеширования.Md5)

    ПеревестиВНовыйФорматConfigDumpInfo(ПутьКФайламКонфигурации)
    ПеревестиВНовыйФорматParentConfigurations(ПутьКФайламКонфигурации)

    для КлючИЗначение из СтруктураКонфигурации.Метаданные

        знч ОбъектМетаданных = КлючИЗначение.Значение

        если ПолучитьПоПоддержке
            и ОбъектМетаданных.Идентификатор.ПравилаПользователя == "0"
            и не ОбъектМетаданных.ОтличаютсяПравилаПользователяПодчиненных
            продолжить
        ;

        знч ОсновнойФайл = новый Файл(ОбъектМетаданных.Файлы.Получить("ПутьКОсновномуФайлу"))
        если не ОсновнойФайл.Существует()
            Консоль.Записать("\н%{ОсновнойФайл.Путь}")
            Консоль.Записать("Не существует путь к объекту метаданных: %{ОбъектМетаданных.Имя}")
            выбросить новый ИсключениеНедопустимоеСостояние()
        ;

        если ПолучитьФайлыКонфигурации
            знч ОсновнойФайлОтносительныйПуть = ОсновнойФайл.Путь.Заменить(ПутьКФайламКонфигурации, "")
            знч ОсновнойФайлРезультат = новый Файл(ПутьКФайламРезультата + СР + ОсновнойФайлОтносительныйПуть)
            если ОсновнойФайлРезультат.Существует()
                Файлы.Удалить(ОсновнойФайлРезультат)
            ;
            Файлы.Скопировать(ОсновнойФайл, ОсновнойФайлРезультат)
            если ОсновнойФайл.Имя == "Configuration.xml"
                знч ФайлConfigDumpInfo     = новый Файл(ОсновнойФайл.Путь.Заменить("Configuration.xml", "ConfigDumpInfo.xml"))
                знч ФайлConfigDumpInfoТемп = новый Файл(ОсновнойФайлРезультат.Путь.Заменить("Configuration.xml", "ConfigDumpInfo.xml"))
                Файлы.Скопировать(ФайлConfigDumpInfo, ФайлConfigDumpInfoТемп)
            ;
            ТекстФайлыДляЗагрузки = ТекстФайлыДляЗагрузки + ОсновнойФайлОтносительныйПуть + Символы.НОВАЯ_СТРОКА
            если ОбъектМетаданных.Имя.НачинаетсяС("Configuration")
                ТекстФайлыДляЗагрузки = ТекстФайлыДляЗагрузки + "Ext%{СР}ParentConfigurations.bin" + Символы.НОВАЯ_СТРОКА
            ;
        ;

        IConfigurationProperties.РассчитатьХешФайла(ОсновнойФайл.Путь, ХешированиеДанныхКонфигурации)
        если ОсновнойФайл.Имя == "Configuration.xml"
            знч ПутьConfigDumpInfo = ОсновнойФайл.Путь.Заменить("Configuration.xml", "ConfigDumpInfo.xml")
            IConfigurationProperties.РассчитатьХешФайла(ПутьConfigDumpInfo, ХешированиеДанныхКонфигурации)
        ;

        знч ОсновнойКаталог     = новый Файл(ОбъектМетаданных.Файлы.Получить("ПутьКОсновномуКаталогу"))
        если ОсновнойКаталог.Существует() и не ОсновнойКаталог.ЭтоКаталог()
            Консоль.Записать("\н%{ОсновнойКаталог.Путь}")
            Консоль.Записать("Ошибочный путь к каталогу объекта метаданных: %{ОбъектМетаданных.Имя}")
            выбросить новый ИсключениеНедопустимоеСостояние()
        иначе если ОсновнойКаталог.Существует() и ОсновнойКаталог.ЭтоКаталог()
            если ПолучитьФайлыКонфигурации
                знч ОсновнойКаталогРезультат = новый Файл(ПутьКФайламРезультата + СР + ОсновнойКаталог.Путь.Заменить(ПутьКФайламКонфигурации, ""))
                если ОсновнойКаталогРезультат.Существует()
                    Файлы.Удалить(ОсновнойКаталогРезультат)
                ;
                Файлы.Скопировать(ОсновнойКаталог.Путь, ОсновнойКаталогРезультат)
                если ОсновнойФайл.Имя == "Configuration.xml"
                    знч ФайлПоставщикаРезультата = ПолучитьФайлПоставщика(ПутьКФайламРезультата)
                    Файлы.Удалить(ФайлПоставщикаРезультата)
                ;
            ;
            IConfigurationProperties.РассчитатьХешКаталога(ОсновнойКаталог.Путь, ХешированиеДанныхКонфигурации, Ложь)
        ;
    ;

    СтруктураКонфигурации.Хеш                   = ХешированиеДанныхКонфигурации.Результат.ВСтроку()
    СтруктураКонфигурации.ТекстФайлыДляЗагрузки = ТекстФайлыДляЗагрузки

    ВремяИсполненияОпераций.ЗавершитьЗамер("ОбработатьФайлыКонфигурации")

;

@Глобально
метод ПолучитьФайлПоставщика(ПутьКФайламКонфигурации: Строка): Файл

    знч СР = Файлы.СимволРазделителя
    знч НастройкиПоискаФайлов = новый НастройкиПоискаФайлов()
            .ИмяСодержит(".cf")
            .МаксимальнаяГлубина(1)
            .ИсключитьФайлы(Ложь)
            .ИсключитьКаталоги(Истина)

    знч КаталогParentConfigurations = новый Файл(ПутьКФайламКонфигурации + "%{СР}Ext%{СР}ParentConfigurations")
    если не КаталогParentConfigurations.Существует()
        возврат КаталогParentConfigurations
    ;

    пер ФайлПоставщика = новый Файл(КаталогParentConfigurations.Путь + СР + "ФайлПоставщика.cf")
    знч ПоискФайлаПоставщика = Файлы.Найти(КаталогParentConfigurations, НастройкиПоискаФайлов)

    если ПоискФайлаПоставщика.Размер() > 0
        ФайлПоставщика = ПоискФайлаПоставщика[0]
    ;

    возврат ФайлПоставщика

;

@Глобально
метод ПолучитьФайлConfiguration(ПутьКФайламКонфигурации: Строка): Файл

    знч СР = Файлы.СимволРазделителя
    знч ФайлConfiguration = новый Файл(ПутьКФайламКонфигурации + "%{СР}Configuration.xml")

    возврат ФайлConfiguration

;

@Глобально
метод ПолучитьФайлConfigDumpInfo(ПутьКФайламКонфигурации: Строка): Файл

    знч СР = Файлы.СимволРазделителя
    знч ФайлConfigDumpInfo = новый Файл(ПутьКФайламКонфигурации + "%{СР}ConfigDumpInfo.xml")

    возврат ФайлConfigDumpInfo

;

@Глобально
метод ПолучитьФайлParentConfigurations(ПутьКФайламКонфигурации: Строка): Файл

    знч СР = Файлы.СимволРазделителя
    знч ФайлParentConfigurations = новый Файл(ПутьКФайламКонфигурации + "%{СР}Ext%{СР}ParentConfigurations.bin")

    возврат ФайлParentConfigurations

;

@Глобально
метод ПрочитатьВерсиюКонфигурации(ПутьКФайламКонфигурации: Строка): Строка

    знч ФайлConfiguration = ПолучитьФайлConfiguration(ПутьКФайламКонфигурации)
    пер Версия = ""

    если не ФайлConfiguration.Существует()
        возврат Версия
    ;

    исп ПотокЧтенияonfiguration = ФайлConfiguration.ОткрытьПотокЧтения()
    знч ЧтениеXml = новый ЧтениеXml(ПотокЧтенияonfiguration)

    если ЧтениеXml.СледующийДо("Version")
        ЧтениеXml.Следующий()
        Версия = ЧтениеXml.Значение
    ;
    ПотокЧтенияonfiguration.Закрыть()

    возврат Версия

;

// СлужеюныеПроцедурыИФункции

@Локально
метод ПрочитатьНастройкиПоддержки(ПутьКФайламКонфигурации: Строка) : IConfigurationProperties.НастройкиПоддержки

    знч НастройкиПоддержки = новый IConfigurationProperties.НастройкиПоддержки()

    знч ФайлИзменений   = ПолучитьФайлParentConfigurations(ПутьКФайламКонфигурации)
    если не ФайлИзменений.Существует()
        возврат НастройкиПоддержки
    ;

    знч ТекстДанныеИзменения = ФайлИзменений.ОткрытьПотокЧтения().ПрочитатьКакСтроку()
    знч СимволРазделения = ТекстДанныеИзменения.Найти("," + Символы.НОВАЯ_СТРОКА) < 0
        ? ","
        : "," + Символы.НОВАЯ_СТРОКА

    знч ДанныеИзменения = ТекстДанныеИзменения.Разделить(СимволРазделения, Истина)
    знч КоличествоДанныхИзменения = ДанныеИзменения.Размер()
    знч Граница = КоличествоДанныхИзменения - 15
    пер Индекс  = 0

    пока Истина

        если Индекс <= 9
            НастройкиПоддержки.НачальныеДанные.Добавить(ДанныеИзменения[Индекс])
        иначе если Индекс >= Граница
            НастройкиПоддержки.КонечныеДанные.Добавить(ДанныеИзменения[Индекс])
        иначе если (Индекс - 10)%4 > 0
            // ни чего не выполняем
        иначе

            знч Идентификатор = новый IConfigurationProperties.Идентификатор(
                ДанныеИзменения[Индекс + 2],
                ДанныеИзменения[Индекс + 3],
                "",
                ДанныеИзменения[Индекс],
                ДанныеИзменения[Индекс + 1])

            если не Идентификатор.ГУИД == Идентификатор.ГУИДПоставщика
                Идентификатор.Исправить = Истина
            ;

            НастройкиПоддержки.Идентификаторы.Вставить(
                ДанныеИзменения[Индекс + 2],
                Идентификатор
            )
        ;

        Индекс += 1
        если Индекс == КоличествоДанныхИзменения
            прервать
        ;
    ;

    возврат НастройкиПоддержки
;

@Локально
метод ПолучитьФайлыОбъектаМетаданных(ПутьКФайламПроекта: Строка, ИмяОбъектаМетаданных: Строка, ПолучитьФайлыРодителя = Ложь) : Соответствие<Строка, Строка>

    знч СР = Файлы.СимволРазделителя
    знч ФайлыОбъекта = новый Соответствие<Строка, Строка>()
    знч СоставИмениМетаданных = ИмяОбъектаМетаданных.Разделить(".")
    пер ОсновнойФайлПуть = ""
    пер ОсновнойКаталогПуть = ""

    если СоставИмениМетаданных[0] == "Configuration"
        ОсновнойКаталогПуть = "%{ПутьКФайламПроекта}%{СР}Ext"
        ОсновнойФайлПуть = "%{ПутьКФайламПроекта}%{СР}Configuration.xml"
    иначе если СоставИмениМетаданных[0] == "Subsystem"
        ОсновнойКаталогПуть = "%{ПутьКФайламПроекта}"
        для Индекс = 0 по СоставИмениМетаданных.Размер() - 1
            если Индекс % 2 == 0
                ОсновнойКаталогПуть = ОсновнойКаталогПуть + "%{СР}%{ПутьКОбъектуМетаданных(СоставИмениМетаданных[Индекс])}"
            иначе
                ОсновнойКаталогПуть = ОсновнойКаталогПуть + "%{СР}%{СоставИмениМетаданных[Индекс]}"
            ;
        ;
        ОсновнойФайлПуть = "%{ОсновнойКаталогПуть}.xml"
    иначе
        если СоставИмениМетаданных.Размер() == 2 или ПолучитьФайлыРодителя
            ОсновнойКаталогПуть = "%{ПутьКФайламПроекта}%{СР}%{ПутьКОбъектуМетаданных(СоставИмениМетаданных[0])}%{СР}%{СоставИмениМетаданных[1]}"
        иначе если СоставИмениМетаданных.Размер() == 4
            ОсновнойКаталогПуть = "%{ПутьКФайламПроекта}%{СР}%{ПутьКОбъектуМетаданных(СоставИмениМетаданных[0])}%{СР}%{СоставИмениМетаданных[1]}%{СР}%{ПутьКОбъектуМетаданных(СоставИмениМетаданных[2])}%{СР}%{СоставИмениМетаданных[3]}"
        иначе
            Консоль.Записать("\нНе определен путь к объекту метаданных: %{ИмяОбъектаМетаданных}")
            выбросить новый ИсключениеНедопустимоеСостояние()
        ;
        ОсновнойФайлПуть = "%{ОсновнойКаталогПуть}.xml"
    ;

    ФайлыОбъекта.Вставить("ПутьКОсновномуФайлу",    ОсновнойФайлПуть)
    ФайлыОбъекта.Вставить("ПутьКОсновномуКаталогу", ОсновнойКаталогПуть)

    возврат ФайлыОбъекта
;

@Локально
метод ПутьКОбъектуМетаданных(ТипОбъектаМетаданных: Строка) : Строка

    выбор ТипОбъектаМетаданных
    когда "BusinessProcess"
        возврат "BusinessProcesses"
    когда "ChartOfAccounts"
        возврат "ChartsOfAccounts"
    когда "ChartOfCalculationTypes"
        возврат "ChartsOfCalculationTypes"
    когда "ChartOfCharacteristicTypes"
        возврат "ChartsOfCharacteristicTypes"
    когда "FilterCriterion"
        возврат "FilterCriteria"
    когда "Template"
        возврат "Templates"
    иначе
        возврат "%{ТипОбъектаМетаданных}s"
    ;
;