#!/usr/bin/executor

#требуется IProjectProperties.sbsl
#требуется IConfigurationProperties.sbsl
#требуется IConfiguration.sbsl
#требуется IIBOperation.sbsl
#требуется ILogging.sbsl
#требуется oc_main.sbsl

// ПрограммныйИнтерфейс

@Глобально
метод СобратьФайлыКонфигурации(ПараметрыПроекта: IProjectProperties.ПараметрыПроекта, СобратьРасширения: Булево = Ложь, ПересобратьКонфигурациюПоставщика: Булево = Ложь) : Булево

    знч ВремяИсполненияОпераций = новый ILogging.ВремяИсполненияОпераций()
    знч СобранныеПроекты = новый Массив<Строка>()
    знч ОшибочныеПроекты = новый Массив<Строка>()
    пер Статус = Истина

    если не СобратьРасширения
        если ПараметрыПроекта.ПутьКФайламКонфигурации.Путь.Пусто()
            или не (новый Файл(ПараметрыПроекта.ПутьКФайламКонфигурации.Путь)).Существует()
            возврат Статус
        ;
        ВремяИсполненияОпераций.НачатьЗамер("ПолучитьФайлКонфигурации")
        знч СтатусПолучения = ПолучитьФайлКонфигурации(
            ПараметрыПроекта,
            ПараметрыПроекта.ПутьКФайламКонфигурации,
            ПересобратьКонфигурациюПоставщика)
        знч Длительность = ВремяИсполненияОпераций.ЗавершитьЗамер("ПолучитьФайлКонфигурации")
        знч ТекстСборки = "%{IProjectProperties.ИМЯ_КАТАЛОГА_КОНФИГУРАЦИИ} (%{Длительность.Представление("с")} сек.)"
        если СтатусПолучения == 1
            СобранныеПроекты.Добавить(ТекстСборки)
        иначе если СтатусПолучения == 2
            ОшибочныеПроекты.Добавить(ТекстСборки)
        ;
        Статус = Статус и СтатусПолучения < 2
    ;

    пер ПодготовитьКонфигурацию = Истина
    для Расширение из ПараметрыПроекта.Расширения
        если не СобратьРасширения
            прервать
        ;
        если не (новый Файл(Расширение.Значение.Путь)).Существует()
            продолжить
        ;
        если ПодготовитьКонфигурацию
            ПодготовитьКонфигурацию(ПараметрыПроекта)
            ПодготовитьКонфигурацию = Ложь
        ;
        ВремяИсполненияОпераций.НачатьЗамер("ПолучитьФайлРасширения")
        знч СтатусПолучения = ПолучитьФайлКонфигурации(
            ПараметрыПроекта,
            Расширение.Значение,
            Ложь)
        знч Длительность = ВремяИсполненияОпераций.ЗавершитьЗамер("ПолучитьФайлРасширения")
         знч ТекстСборки = "%{Расширение.Ключ} (%{Длительность.Представление("с")} сек.)"
        если СтатусПолучения == 1
            СобранныеПроекты.Добавить(ТекстСборки)
        иначе если СтатусПолучения == 2
            ОшибочныеПроекты.Добавить(ТекстСборки)
        ;
        Статус = Статус и СтатусПолучения < 2
    ;

    ВывестиИнформациюПоПроектам(СобранныеПроекты)
    ВывестиИнформациюПоПроектам(ОшибочныеПроекты, 2)

    возврат Статус
;

@Глобально
метод СобратьПатчКонфигурации(ПараметрыПроекта: IProjectProperties.ПараметрыПроекта, ПараметрыСоединенияИБ: IProjectProperties.ПараметрыСоединенияИБ|Неопределено = Неопределено): Строка|Неопределено

    знч ВремяИсполненияОпераций = новый ILogging.ВремяИсполненияОпераций()
    знч СобранныеПроекты = новый Массив<Строка>()

    если ПараметрыПроекта.ПутьКФайламКонфигурации.Путь.Пусто()
        возврат ""
    ;

    ВремяИсполненияОпераций.НачатьЗамер("СобратьПатчКонфигурации")

    знч КаталогСборкиПатча = ПолучитьВременныйКаталог(ПараметрыПроекта, IProjectProperties.ИМЯ_КАТАЛОГА_ПАТЧА)
    знч ФайлЗагрузкиПатча  = новый Файл(oc_main.ДобавитьЧастьПути(ПараметрыПроекта.ПутьКСборкеПроекта.Путь, ["%{IProjectProperties.ИМЯ_КАТАЛОГА_ПАТЧА}_in"]))
    знч КаталогДляВыгрузки = новый Файл("%{КаталогСборкиПатча.Путь}_temp")

    если КаталогСборкиПатча.Существует()
        УдалитьФайлСКонтролемОшибок(КаталогСборкиПатча)
    ;

    пер СтруктураКонфигурации: IConfigurationProperties.СтруктураКонфигурации|Неопределено
    пер НастройкиПоддержкиИБ: IConfigurationProperties.СтруктураКонфигурации|Неопределено

    если не ПараметрыСоединенияИБ == Неопределено
        IIBOperation.ВыгрузитьФайлыКонфигурации(
            КаталогДляВыгрузки.Путь,
            ПараметрыСоединенияИБ.СтрокаСоединения,
            ПараметрыСоединенияИБ.ПутьКФайламПлатформы,
            ПараметрыПроекта.РежимИСполнения,
            ПараметрыСоединенияИБ.Логин,
            ПараметрыСоединенияИБ.Пароль,
            "",
            "Configuration.ParentConfigurations")
        НастройкиПоддержкиИБ = IConfiguration.ПрочитатьСтруктуруКонфигурации(
            КаталогДляВыгрузки.Путь,
            IConfigurationProperties.РежимОбработки.ПолучитьПоПоддержке)
    ;

    попытка
        СтруктураКонфигурации = ПрочитатьСтруктуруКонфигурации(
            ПараметрыПроекта.ПутьКФайламКонфигурации.Путь,
            КаталогСборкиПатча.Путь,
            Ложь,
            НастройкиПоддержкиИБ == Неопределено ? Неопределено : НастройкиПоддержкиИБ.НастройкиПоддержки)
    поймать Исключение: Исключение
        СтруктураКонфигурации = Неопределено
        если не Исключение.Описание.Пусто()
            Консоль.Записать("\н#################################################################")
            Консоль.Записать(Исключение.Описание)
            Консоль.Записать("#################################################################")
        ;
    ;

    пер ФайлПоставщика = IConfiguration.ПолучитьФайлПоставщика(ПараметрыПроекта.ПутьКФайламКонфигурации.Путь)
    пер ПутьКФайлуПоставщикаЗагрузки = ФайлПоставщика.Путь.Заменить(ПараметрыПроекта.ПутьКФайламКонфигурации.Путь, КаталогСборкиПатча.Путь)
    если не ПараметрыСоединенияИБ == Неопределено
        если не ФайлПоставщика.Существует() или ФайлПоставщика.Размер.ВБайтах() == 0
            ФайлПоставщика = IConfiguration.ПолучитьФайлПоставщика(КаталогДляВыгрузки.Путь)
            ПутьКФайлуПоставщикаЗагрузки = ФайлПоставщика.Путь.Заменить(КаталогДляВыгрузки.Путь, КаталогСборкиПатча.Путь)
        ;
        если ФайлПоставщика.Существует()
            Файлы.Скопировать(ФайлПоставщика, ПутьКФайлуПоставщикаЗагрузки)
        ;
        УдалитьФайлСКонтролемОшибок(КаталогДляВыгрузки)
    иначе
        (новый Файл(ПутьКФайлуПоставщикаЗагрузки)).ОткрытьПотокЗаписи().Записать(Байты{}).Закрыть()
    ;

    знч Длительность = ВремяИсполненияОпераций.ЗавершитьЗамер("СобратьПатчКонфигурации")

    если СтруктураКонфигурации == Неопределено
        возврат Неопределено
    ;

    ФайлЗагрузкиПатча.ОткрытьПотокЗаписи().Записать(СтруктураКонфигурации.ТекстФайлыДляЗагрузки).Закрыть()

    СобранныеПроекты.Добавить("%{IProjectProperties.ИМЯ_КАТАЛОГА_ПАТЧА} (%{Длительность.Представление("с")} сек.)")
    ВывестиИнформациюПоПроектам(СобранныеПроекты)

    если СтруктураКонфигурации.Хеш == ПараметрыПроекта.ПутьКФайламКонфигурации.Хеш
        возврат ""
    иначе
        возврат СтруктураКонфигурации.Хеш
    ;

;

@Глобально
метод ОбновитьФайлыКонфигурации(ПараметрыПроекта: IProjectProperties.ПараметрыПроекта, ТипЗагрузки = 1, ПолучитьФайлСравнения = Ложь) : Булево

    знч ВремяИсполненияОпераций = новый ILogging.ВремяИсполненияОпераций()

    если ПараметрыПроекта.ПараметрыСоединенияИБ.СтрокаСоединения.Пусто()
        Консоль.Записать("\нНе заполнен путь к ИБ в файле хеша ProjectsHash.json")
        возврат Ложь
    ;

    если ТипЗагрузки == 1
        ВремяИсполненияОпераций.НачатьЗамер("ОбновитьКонфигурацию")
        ЗагрузитьКонфигурацию(ПараметрыПроекта, ПараметрыПроекта.ПараметрыСоединенияИБ, Ложь)
        ПолучитьФайлыКонфигурации(ПараметрыПроекта, Ложь, 2)
        ВремяИсполненияОпераций.ЗавершитьЗамер("ОбновитьКонфигурацию")
    иначе если ТипЗагрузки == 2
        ВремяИсполненияОпераций.НачатьЗамер("ОбновитьКонфигурациюИзФайлов")
        ЗагрузитьФайлыКонфигурации(ПараметрыПроекта, ПараметрыПроекта.ПараметрыСоединенияИБ, Ложь)
        ПолучитьФайлыКонфигурации(ПараметрыПроекта, Ложь, 2)
        ВремяИсполненияОпераций.ЗавершитьЗамер("ОбновитьКонфигурациюИзФайлов")
    иначе если ТипЗагрузки == 3
        ВремяИсполненияОпераций.НачатьЗамер("ОбновитьРасширенияКонфигурации")
        ЗагрузитьКонфигурацию(ПараметрыПроекта, ПараметрыПроекта.ПараметрыСоединенияИБ, Истина)
        ВремяИсполненияОпераций.ЗавершитьЗамер("ОбновитьРасширенияКонфигурации")
     иначе если ТипЗагрузки == 4
        ВремяИсполненияОпераций.НачатьЗамер("ОбновитьРасширенияКонфигурацииИзФайлов")
        ЗагрузитьФайлыКонфигурации(ПараметрыПроекта, ПараметрыПроекта.ПараметрыСоединенияИБ, Истина)
        ВремяИсполненияОпераций.ЗавершитьЗамер("ОбновитьРасширенияКонфигурацииИзФайлов")
    иначе
        ВремяИсполненияОпераций.НачатьЗамер("ОбновитьПатчКонфигурации")
        ЗагрузитьПатчКонфигурации(ПараметрыПроекта, ПараметрыПроекта.ПараметрыСоединенияИБ, ПолучитьФайлСравнения)
        ВремяИсполненияОпераций.ЗавершитьЗамер("ОбновитьПатчКонфигурации")
    ;

    ВыполнитьПроверкуКонфигурации(ПараметрыПроекта, (ТипЗагрузки == 3 или ТипЗагрузки == 4 ? "AllExtensions": ""))

    возврат Истина
;

@Глобально
метод ВыполнитьПроверкуКонфигурации(ПараметрыПроекта: IProjectProperties.ПараметрыПроекта, ИмяРасширения = "") : Булево

    знч ВремяИсполненияОпераций = новый ILogging.ВремяИсполненияОпераций()

    IIBOperation.ВыполнитьПроверкуКонфигурации(
        ПараметрыПроекта.ПараметрыСоединенияИБ.СтрокаСоединения,
        ПараметрыПроекта.ПараметрыСоединенияИБ.ПутьКФайламПлатформы,
        ПараметрыПроекта.ПараметрыСоединенияИБ.Логин,
        ПараметрыПроекта.ПараметрыСоединенияИБ.Пароль,
        ИмяРасширения,
        ПараметрыПроекта.Проверки.ВоМножество())

    ВремяИсполненияОпераций.ЗавершитьЗамер("ВыполнитьПроверкуКонфигурации")

    возврат Истина

;

@Глобально
метод ПодготовитьКонфигурацию(ПараметрыПроекта: IProjectProperties.ПараметрыПроекта) : Булево

    пер СтатусВыполнения = Истина
    знч ВремяИсполненияОпераций = новый ILogging.ВремяИсполненияОпераций()

    если ПараметрыПроекта.РежимСборкиПроектаРасширения == IProjectProperties.РежимыСборкиПроекта.ВПустойКонфигурации
        возврат СтатусВыполнения
    ;

    ВремяИсполненияОпераций.НачатьЗамер("ПодготовитьКонфигурацию")

    знч Версия = IConfiguration.ПрочитатьВерсиюКонфигурации(ПараметрыПроекта.ПутьКФайламКонфигурации.Путь)
    знч КаталогВременнойБазы = ПолучитьВременныйКаталог(ПараметрыПроекта, IProjectProperties.ИМЯ_КАТАЛОГА_КОНФИГУРАЦИИ, Версия)

    если КаталогВременнойБазы.Дочерние.Размер() == 0
        СтатусВыполнения = СобратьФайлыКонфигурации(ПараметрыПроекта)
    иначе
        знч Хеш = СобратьПатчКонфигурации(ПараметрыПроекта)
        если не Хеш == Неопределено и не Хеш.Пусто()
            ПараметрыПроекта.ПутьКФайламКонфигурации.Хеш = ""
            знч ПараметрыСоединенияИБ = новый IProjectProperties.ПараметрыСоединенияИБ(
                КаталогВременнойБазы.Путь,
                "",
                ПараметрыПроекта.ПутьКФайламПлатформы)
            ЗагрузитьПатчКонфигурации(ПараметрыПроекта, ПараметрыСоединенияИБ)
            ПараметрыПроекта.ПутьКФайламКонфигурации.Хеш = Хеш
        ;
        СтатусВыполнения = не Хеш == Неопределено
    ;

    ВремяИсполненияОпераций.ЗавершитьЗамер("ПодготовитьКонфигурацию")

    возврат СтатусВыполнения

;

@Глобально
метод ПеревестиФайлИзмененныхОбъектовВНовыйФормат(ПутьКФайламПроекта: Строка)

    IConfiguration.ПеревестиВНовыйФорматParentConfigurations(ПутьКФайламПроекта)
;

@Глобально
метод ПеревестиФайлИсторииОбъектовВНовыйФормат(ПутьКФайламПроекта: Строка)

    IConfiguration.ПеревестиВНовыйФорматConfigDumpInfo(ПутьКФайламПроекта)
;

@Глобально
метод АнализироватьНастройкиПоддержки(ПараметрыПроекта: IProjectProperties.ПараметрыПроекта, ИсправитьОшибки = Ложь, ДляКонфигурацииПоставщика = Ложь) : Булево

    пер ПутьКФайламПроекта = ПараметрыПроекта.ПутьКФайламКонфигурации
    знч ВремяИсполненияОпераций = новый ILogging.ВремяИсполненияОпераций()

    ВремяИсполненияОпераций.НачатьЗамер("АнализироватьНастройкиПоддержки")

    если ДляКонфигурацииПоставщика
        ПолучитьФайлыКонфигурации(ПараметрыПроекта, ДляКонфигурацииПоставщика)
        ПутьКФайламПроекта = ПараметрыПроекта.ПутьКФайламКонфигурацииПоставщика
    ;

    знч СтруктураКонфигурации = IConfiguration.ПрочитатьСтруктуруКонфигурации(ПутьКФайламПроекта.Путь, IConfigurationProperties.РежимОбработки.Основной)
    IConfiguration.ИсправитьНастройкиПоддержки(СтруктураКонфигурации, ИсправитьОшибки)

    ВремяИсполненияОпераций.ЗавершитьЗамер("АнализироватьНастройкиПоддержки")

    возврат Истина
;

@Глобально
метод ПолучитьФайлыКонфигурации(ПараметрыПроекта: IProjectProperties.ПараметрыПроекта, ДляКонфигурацииПоставщика = Ложь, Режим = 0) : Булево

    пер ПутьКФайламПроекта = ПараметрыПроекта.ПутьКФайламКонфигурации
    если ДляКонфигурацииПоставщика
        ПутьКФайламПроекта = ПараметрыПроекта.ПутьКФайламКонфигурацииПоставщика
    ;
    знч КаталогФайловПроекта = новый Файл(ПутьКФайламПроекта.Путь)
    пер ФайлыДляВыгрузки: Строка|Файл = ""
    знч ВремяИсполненияОпераций = новый ILogging.ВремяИсполненияОпераций()

    если Режим == 2
        ФайлыДляВыгрузки = "ConfigDumpInfo.xml"
    иначе
        ФайлыДляВыгрузки = новый Файл(oc_main.ДобавитьЧастьПути(ПараметрыПроекта.ПутьКСборкеПроекта.Путь, ["%{КаталогФайловПроекта.Имя}_out"]))
        если не (ФайлыДляВыгрузки как Файл).Существует()
            ФайлыДляВыгрузки = ""
        иначе
            Режим = 1
        ;
    ;

    ВремяИсполненияОпераций.НачатьЗамер("ПолучитьФайлыКонфигурации")

    если ДляКонфигурацииПоставщика

        знч ФайлConfigDumpInfo = IConfiguration.ПолучитьФайлConfigDumpInfo(КаталогФайловПроекта.Путь)
        если Режим == 2 и ФайлConfigDumpInfo.Существует()
            возврат Истина
        ;

        знч СтруктураКонфигурации = ПрочитатьСтруктуруКонфигурации(КаталогФайловПроекта.Путь)
        если СтруктураКонфигурации.Хеш == ПутьКФайламПроекта.Хеш и КаталогФайловПроекта.Существует()
            возврат Истина
        ;

        знч КаталогВременнойБазыПоставщика = ПолучитьВременныйКаталог(ПараметрыПроекта, IProjectProperties.ИМЯ_КАТАЛОГА_КОНФИГУРАЦИИ_ПОСТАВЩИКА, СтруктураКонфигурации.Версия)
        знч ПутьКФайлуПоставщика = IConfiguration.ПолучитьФайлПоставщика(ПараметрыПроекта.ПутьКФайламКонфигурации.Путь)

        IIBOperation.СоздатьИнформационнуюБазу(
            КаталогВременнойБазыПоставщика.Путь,
            ПараметрыПроекта.ПутьКФайламПлатформы,
            ПараметрыПроекта.РежимИСполнения)

        IIBOperation.ЗагрузитьКонфигурацию(
            ПутьКФайлуПоставщика.Путь,
            КаталогВременнойБазыПоставщика.Путь,
            ПараметрыПроекта.ПутьКФайламПлатформы,
            ПараметрыПроекта.РежимИСполнения,
            "",
            "",
            "")

        УдалитьФайлСКонтролемОшибок(КаталогФайловПроекта)

        IIBOperation.ВыгрузитьФайлыКонфигурации(
            КаталогФайловПроекта.Путь,
            КаталогВременнойБазыПоставщика.Путь,
            ПараметрыПроекта.ПутьКФайламПлатформы,
            ПараметрыПроекта.РежимИСполнения,
            "",
            "",
            "",
            ФайлыДляВыгрузки)

        ПутьКФайламПроекта.Хеш = СтруктураКонфигурации.Хеш

        УдалитьФайлСКонтролемОшибок(КаталогВременнойБазыПоставщика)

    иначе

        если ПараметрыПроекта.ПараметрыСоединенияИБ.СтрокаСоединения.Пусто()
            Консоль.Записать("\нНе заполнен путь к ИБ в файле хеша ProjectsHash.json")
            возврат Ложь
        ;

        знч ПутьКВыгрузкиФайлаВерсий = (Режим == 0 и ПараметрыПроекта.ФайлВерсийКонфигурации.Существует())
            ? ПараметрыПроекта.ФайлВерсийКонфигурации.Путь
            : ""

        пер СтатусКонфигурации = 0
        если не ПутьКВыгрузкиФайлаВерсий.Пусто()
            знч ПутьКФайлуСтатуса = oc_main.ДобавитьЧастьПути(ПараметрыПроекта.ПутьКВременнымФайлам.Путь, ["Status.txt"])
            СтатусКонфигурации = IIBOperation.ПолучитьСтатусКонфигурации(
                ПутьКФайлуСтатуса,
                ПараметрыПроекта.ПараметрыСоединенияИБ.СтрокаСоединения,
                ПараметрыПроекта.ПараметрыСоединенияИБ.ПутьКФайламПлатформы,
                ПараметрыПроекта.РежимИСполнения,
                ПараметрыПроекта.ПараметрыСоединенияИБ.Логин,
                ПараметрыПроекта.ПараметрыСоединенияИБ.Пароль,
                "",
                ПутьКВыгрузкиФайлаВерсий)
        иначе если Режим != 0
            СтатусКонфигурации = 1
        ;

        если СтатусКонфигурации == 0
            Консоль.Записать("\нИзменений нет")
            ВремяИсполненияОпераций.ЗавершитьЗамер("ПолучитьФайлыКонфигурации")
            возврат Истина
        ;

        знч ПутьДляВыгрузки = (СтатусКонфигурации == 2)
            ? новый Файл(ПутьКФайламПроекта.Путь)
            : новый Файл(oc_main.ДобавитьЧастьПути(ПараметрыПроекта.ПутьКВременнымФайлам.Путь, ["temp"]))
        знч ФайлВерсииНовый = новый Файл(
            oc_main.ДобавитьЧастьПути(
                ПутьДляВыгрузки.Путь,
                [
                    oc_main.УдалитьЧастьПути(
                        ПараметрыПроекта.ФайлВерсийКонфигурации.Путь,
                        [ПараметрыПроекта.ПутьКВременнымФайлам.Путь]
                    )
                ]
            ))

        если СтатусКонфигурации == 2
            Консоль.Записать("\нПолная выгрузка:")
            УдалитьФайлСКонтролемОшибок(ПутьДляВыгрузки, Истина)
        ;

        если не ПутьДляВыгрузки.Существует()
            Файлы.СоздатьКаталог(ПутьДляВыгрузки)
        ;

        IIBOperation.ВыгрузитьФайлыКонфигурации(
            ПутьДляВыгрузки.Путь,
            ПараметрыПроекта.ПараметрыСоединенияИБ.СтрокаСоединения,
            ПараметрыПроекта.ПараметрыСоединенияИБ.ПутьКФайламПлатформы,
            ПараметрыПроекта.РежимИСполнения,
            ПараметрыПроекта.ПараметрыСоединенияИБ.Логин,
            ПараметрыПроекта.ПараметрыСоединенияИБ.Пароль,
            "",
            ФайлыДляВыгрузки,
            СтатусКонфигурации == 2 ? "" : ПутьКВыгрузкиФайлаВерсий)

        если ПутьДляВыгрузки.Существует() и ФайлВерсииНовый.Существует()
            Файлы.Скопировать(ФайлВерсииНовый, ПараметрыПроекта.ФайлВерсийКонфигурации)
        ;

        если СтатусКонфигурации == 1 и ПутьДляВыгрузки.Существует()
            пер СтруктураКонфигурации = IConfiguration.ПрочитатьСтруктуруКонфигурации(КаталогФайловПроекта.Путь,
                                                            IConfigurationProperties.РежимОбработки.ПолучитьПоПоддержке)
            знч НастройкиПоиска = новый НастройкиПоискаФайлов()
                .ИсключитьКаталоги(Истина)
                .ИсключитьСсылки(Истина)
            знч НайденныеФайлы = Файлы.Найти(ПутьДляВыгрузки, НастройкиПоиска)

            если НайденныеФайлы.Размер() > 0
                Консоль.Записать("\нПолучены изменения:")
            ;

            пер УдаленыФайлы = Ложь

            если ФайлВерсииНовый.Существует()
                Файлы.Скопировать(
                    ФайлВерсииНовый,
                    oc_main.ДобавитьЧастьПути(
                        ПутьКФайламПроекта.Путь,
                        [oc_main.УдалитьЧастьПути(ФайлВерсииНовый.Путь, [ПутьДляВыгрузки.Путь])]
                    )
                )
            ;
            знч СтруктураКонфигурацииНовая = IConfiguration.ПрочитатьСтруктуруКонфигурации(КаталогФайловПроекта.Путь,
                                                            IConfigurationProperties.РежимОбработки.ПолучитьПоПоддержке)
            для ОбъектМетаданных из СтруктураКонфигурации.Идентификаторы
                знч ОбъектСуществует = СтруктураКонфигурацииНовая.Идентификаторы.СодержитКлюч(ОбъектМетаданных.Ключ)
                если не ОбъектСуществует и ОбъектМетаданных.Значение.Файлы.Размер() > 0
                    УдалитьФайлСКонтролемОшибок(ОбъектМетаданных.Значение.Файлы["ПутьКОсновномуФайлу"])
                    УдалитьФайлСКонтролемОшибок(ОбъектМетаданных.Значение.Файлы["ПутьКОсновномуКаталогу"])
                    УдаленыФайлы = Истина
                ;
            ;

            если УдаленыФайлы
                Консоль.Записать("\н")
            ;
            для ФайлИсточник из НайденныеФайлы
                если ФайлИсточник.ИмяБезРасширения == "ConfigDumpInfo"
                    продолжить
                ;
                знч ФайлЦель = новый Файл(
                    oc_main.ДобавитьЧастьПути(
                        ПутьКФайламПроекта.Путь,
                        [oc_main.УдалитьЧастьПути(ФайлИсточник.Путь, [ПутьДляВыгрузки.Путь])]
                    ))
                знч НастройкиКопированияФайлов = новый НастройкиКопированияФайлов()
                Файлы.Переместить(ФайлИсточник, ФайлЦель, НастройкиКопированияФайлов)
                Консоль.Записать(ФайлЦель.Путь)
            ;
            Консоль.Записать("\нКаталог файлов конфигурации обновлен")
            УдалитьФайлСКонтролемОшибок(ПутьДляВыгрузки)
        ;
    ;

    если Режим != 2
        ПеревестиФайлИзмененныхОбъектовВНовыйФормат(ПутьКФайламПроекта.Путь)
        ПеревестиФайлИсторииОбъектовВНовыйФормат(ПутьКФайламПроекта.Путь)
    ;

    ВремяИсполненияОпераций.ЗавершитьЗамер("ПолучитьФайлыКонфигурации")

    возврат Истина
;

@Глобально
метод ПолучитьСтатусКонфигурации(ПараметрыПроекта: IProjectProperties.ПараметрыПроекта) : Булево

    знч ПутьКФайлуСтатуса = oc_main.ДобавитьЧастьПути(ПараметрыПроекта.ПутьКВременнымФайлам.Путь, ["Status.txt"])
    IIBOperation.ПолучитьСтатусКонфигурации(
        ПутьКФайлуСтатуса,
        ПараметрыПроекта.ПараметрыСоединенияИБ.СтрокаСоединения,
        ПараметрыПроекта.ПараметрыСоединенияИБ.ПутьКФайламПлатформы,
        ПараметрыПроекта.РежимИСполнения,
        ПараметрыПроекта.ПараметрыСоединенияИБ.Логин,
        ПараметрыПроекта.ПараметрыСоединенияИБ.Пароль,
        "",
        ПараметрыПроекта.ФайлВерсийКонфигурации.Путь)

    возврат Истина

;

// СлужебныеПроцедурыИФункции

@Локально
метод ПрочитатьСтруктуруКонфигурации(ПутьККаталогуПроекта: Строка, ПутьККаталогуСборкиПатча = "", ИсправитьОшибки = Ложь, НастройкиПоддержкиИБ: IConfigurationProperties.НастройкиПоддержки|Неопределено = Неопределено) : IConfigurationProperties.СтруктураКонфигурации

    знч РежимОбработки = IConfigurationProperties.РежимОбработки.ПолучитьПоПоддержке
    знч СтруктураКонфигурации = IConfiguration.ПрочитатьСтруктуруКонфигурации(
        ПутьККаталогуПроекта,
        РежимОбработки,
        НастройкиПоддержкиИБ)
    IConfiguration.ИсправитьНастройкиПоддержки(СтруктураКонфигурации, ИсправитьОшибки)
    IConfiguration.ОбработатьФайлыКонфигурации(
        СтруктураКонфигурации,
        ПутьККаталогуПроекта,
        ПутьККаталогуСборкиПатча,
        РежимОбработки)

    возврат СтруктураКонфигурации

;

@Локально
метод ПолучитьФайлКонфигурации(ПараметрыПроекта: IProjectProperties.ПараметрыПроекта, ПутьКФайламПроекта: IProjectProperties.ПутьКФайламПроекта, ПересобратьКонфигурациюПоставщика: Булево = Ложь): Число

    пер Результат = 0

    знч ПутьКФайламПлатформы         = ПараметрыПроекта.ПутьКФайламПлатформы
    знч РежимИсполнения              = ПутьКФайламПроекта.ЭтоРасширение ? ПараметрыПроекта.РежимИСполненияРасширения : ПараметрыПроекта.РежимИСполнения
    знч РасширениеФайлаСборки        = ПутьКФайламПроекта.ЭтоРасширение ? "cfe" : "cf"
    знч ФайлСборки                   = новый Файл(
        oc_main.ДобавитьЧастьПути(ПараметрыПроекта.ПутьКСборкеПроекта.Путь,
        [ПутьКФайламПроекта.ЭтоРасширение ? "%{ПутьКФайламПроекта.Имя}.%{РасширениеФайлаСборки}" : "1Cv8.%{РасширениеФайлаСборки}"]
        ))


    пер СтруктураКонфигурации = ПрочитатьСтруктуруКонфигурации(ПутьКФайламПроекта.Путь, ИсправитьОшибки = ПересобратьКонфигурациюПоставщика)
    знч Версия = IConfiguration.ПрочитатьВерсиюКонфигурации(ПараметрыПроекта.ПутьКФайламКонфигурации.Путь)

    знч КаталогВременнойБазы         = ПолучитьВременныйКаталог(ПараметрыПроекта, IProjectProperties.ИМЯ_КАТАЛОГА_КОНФИГУРАЦИИ, Версия)
    знч СоздатьИнформационнуюБазу    = (не ПутьКФайламПроекта.ЭтоРасширение
        или ПараметрыПроекта.РежимСборкиПроектаРасширения == IProjectProperties.РежимыСборкиПроекта.ВПустойКонфигурации)
    знч ФайлКонфигурацииПоставщика  = IConfiguration.ПолучитьФайлПоставщика(ПутьКФайламПроекта.Путь)

    если не ПересобратьКонфигурациюПоставщика
        и СтруктураКонфигурации.Хеш == ПутьКФайламПроекта.Хеш
        и ФайлСборки.Существует()
        Консоль.Записать("\н%{ПутьКФайламПроекта.Имя}: изменений нет")
        возврат Результат
    ;

    попытка

        если ПересобратьКонфигурациюПоставщика

            знч ВременныйКаталогБазыПоставщика = ПолучитьВременныйКаталог(ПараметрыПроекта, IProjectProperties.ИМЯ_КАТАЛОГА_КОНФИГУРАЦИИ_ПОСТАВЩИКА, Версия)
            если ВременныйКаталогБазыПоставщика.Существует()
                УдалитьФайлСКонтролемОшибок(ВременныйКаталогБазыПоставщика)
            ;
            знч ВременныйКаталогВыгрузки       = ПолучитьВременныйКаталог(ПараметрыПроекта, "%{КаталогВременнойБазы.ИмяБезРасширения}_xml")
            если ВременныйКаталогВыгрузки.Существует()
                УдалитьФайлСКонтролемОшибок(ВременныйКаталогВыгрузки)
            ;
            
            IIBOperation.СоздатьИнформационнуюБазу(
                ВременныйКаталогБазыПоставщика.Путь,
                ПутьКФайламПлатформы,
                РежимИсполнения)

            IIBOperation.ЗагрузитьКонфигурацию(
                ФайлКонфигурацииПоставщика.Путь,
                ВременныйКаталогБазыПоставщика.Путь,
                ПутьКФайламПлатформы,
                РежимИсполнения,
                "",
                "",
                ПутьКФайламПроекта.Имя)

            IIBOperation.ВыгрузитьФайлыКонфигурации(
                ВременныйКаталогВыгрузки.Путь,
                ВременныйКаталогБазыПоставщика.Путь,
                ПутьКФайламПлатформы,
                РежимИсполнения,
                "",
                "",
                ПутьКФайламПроекта.Имя)

            УдалитьФайлСКонтролемОшибок(ВременныйКаталогБазыПоставщика)

            IIBOperation.СоздатьИнформационнуюБазу(
                ВременныйКаталогБазыПоставщика.Путь,
                ПутьКФайламПлатформы,
                РежимИсполнения)

            IIBOperation.ЗагрузитьФайлыКонфигурации(
                ВременныйКаталогВыгрузки.Путь,
                ВременныйКаталогБазыПоставщика.Путь,
                ПутьКФайламПлатформы,
                РежимИсполнения,
                "",
                "",
                ПутьКФайламПроекта.Имя)

            IConfiguration.ОбработатьФайлыКонфигурации(
                СтруктураКонфигурации,
                ПутьКФайламПроекта.Путь,
                ВременныйКаталогВыгрузки.Путь,
                IConfigurationProperties.РежимОбработки.ПолучитьПоПоддержке)
            Консоль.Записать("\нВ \"%{ПутьКФайламПроекта.Путь}\" добавлены измененные файлы из основной конфигурации")

            Файлы.СоздатьКаталог(oc_main.ДобавитьЧастьПути(ВременныйКаталогВыгрузки.Путь, ["Ext","ParentConfigurations"]))
            IIBOperation.ВыгрузитьКонфигурацию(
                oc_main.ДобавитьЧастьПути(ВременныйКаталогВыгрузки.Путь, ["Ext","ParentConfigurations", ФайлКонфигурацииПоставщика.Имя]),
                ВременныйКаталогБазыПоставщика.Путь,
                ПутьКФайламПлатформы,
                РежимИсполнения,
                "",
                "",
                ПутьКФайламПроекта.Имя)

            УдалитьФайлСКонтролемОшибок(ВременныйКаталогБазыПоставщика)

            УдалитьФайлСКонтролемОшибок(ПутьКФайламПроекта.Путь, Истина)
            Файлы.Скопировать(ВременныйКаталогВыгрузки.Путь, ПутьКФайламПроекта.Путь)
            Консоль.Записать("\нПеренесены изменения из \"%{ВременныйКаталогВыгрузки.Путь}\" в основную конфигурацию")

            УдалитьФайлСКонтролемОшибок(ВременныйКаталогВыгрузки)
        ;

        если СоздатьИнформационнуюБазу
            если КаталогВременнойБазы.Существует()
                УдалитьФайлСКонтролемОшибок(КаталогВременнойБазы)
            ;
            IIBOperation.СоздатьИнформационнуюБазу(
                КаталогВременнойБазы.Путь,
                ПутьКФайламПлатформы,
                РежимИсполнения)
        ;

        пер МаксимальноеЧислоПопыток  = ПутьКФайламПроекта.ЭтоРасширение ? 4 : 1
        пер ВременныйХешПроектаДо     = СтруктураКонфигурации.Хеш
        пер ВременныйХешПроектаПосле  = СтруктураКонфигурации.Хеш
        пер ВременныйХешПроектаЧетный = СтруктураКонфигурации.Хеш

        для ЧислоПопыток = 1 по МаксимальноеЧислоПопыток

            ВременныйХешПроектаДо = ВременныйХешПроектаПосле

            IIBOperation.ЗагрузитьФайлыКонфигурации(
                ПутьКФайламПроекта.Путь,
                КаталогВременнойБазы.Путь,
                ПутьКФайламПлатформы,
                РежимИсполнения,
                "",
                "",
                ПутьКФайламПроекта.Имя)

            УдалитьФайлСКонтролемОшибок(ПутьКФайламПроекта.Путь, Истина)

            IIBOperation.ВыгрузитьФайлыКонфигурации(
                ПутьКФайламПроекта.Путь,
                КаталогВременнойБазы.Путь,
                ПутьКФайламПлатформы,
                РежимИсполнения,
                "",
                "",
                ПутьКФайламПроекта.Имя)

            знч ВремСтруктураКонфигурации = ПрочитатьСтруктуруКонфигурации(ПутьКФайламПроекта.Путь)
            ВременныйХешПроектаПосле = ВремСтруктураКонфигурации.Хеш

            если не ПутьКФайламПроекта.ЭтоРасширение или ВременныйХешПроектаПосле == ВременныйХешПроектаДо
                или ВременныйХешПроектаПосле == ВременныйХешПроектаЧетный
                // Вторая проверка нужна из-за ошибки выгрузки ролей в расширениях
                СтруктураКонфигурации = ВремСтруктураКонфигурации
                прервать
            иначе
                Консоль.Записать("\н*****************************************************************")
                Консоль.Записать("Повторная выгрузка репозитория")
                Консоль.Записать("*****************************************************************")
            ;

            если ЧислоПопыток % 2 == 0
                ВременныйХешПроектаЧетный = ВременныйХешПроектаПосле
            ;
        ;

        если ПутьКФайламПроекта.ЭтоРасширение
            и не ВременныйХешПроектаПосле == ВременныйХешПроектаДо
            и не ВременныйХешПроектаПосле == ВременныйХешПроектаЧетный
            выбросить новый ИсключениеНедопустимоеСостояние("Ошибка выгрузки проекта")
        ;

        IIBOperation.ВыгрузитьКонфигурацию(
            ФайлСборки.Путь,
            КаталогВременнойБазы.Путь,
            ПутьКФайламПлатформы,
            РежимИсполнения,
            "",
            "",
            ПутьКФайламПроекта.Имя)

        если ПересобратьКонфигурациюПоставщика
            IIBOperation.СравнитьКонфигурации(
                oc_main.ДобавитьЧастьПути(ПараметрыПроекта.ПутьКВременнымФайлам.Путь, ["ИзмененияВКонфигурации_prod.mxl"]),
                КаталогВременнойБазы.Путь,
                ПараметрыПроекта.ПутьКФайламПлатформы,
                "",
                "",
                oc_main.РежимыСравнения.СравнитьСКонфигурациейПоставщика,
                ФайлКонфигурацииПоставщика.ИмяБезРасширения)
        ;

        Результат = 1
        ПутьКФайламПроекта.Хеш = СтруктураКонфигурации.Хеш

    поймать Исключение: Исключение
        если не Исключение.Описание.Пусто()
            Консоль.Записать("\н#################################################################")
            Консоль.Записать(Исключение.Описание)
            Консоль.Записать("#################################################################")
        ;
        Результат = 2
    ;

    если ПараметрыПроекта.РежимСборкиПроектаРасширения == IProjectProperties.РежимыСборкиПроекта.ВПустойКонфигурации
        УдалитьФайлСКонтролемОшибок(КаталогВременнойБазы)
    ;

    возврат Результат
;

@Локально
метод ЗагрузитьКонфигурацию(ПараметрыПроекта: IProjectProperties.ПараметрыПроекта, ПараметрыСоединенияИБ: IProjectProperties.ПараметрыСоединенияИБ, ЭтоРасширение = Ложь)

    знч РасширениеФайлаЗагрузки = ЭтоРасширение ? "cfe" : "cf"
    знч РежимИсполнения         = ЭтоРасширение ? ПараметрыПроекта.РежимИСполненияРасширения : ПараметрыПроекта.РежимИСполнения

    знч ФайлыЗагрузки = новый Массив<Файл>()
    если ЭтоРасширение
        для Расширение из ПараметрыПроекта.Расширения
            ФайлыЗагрузки.Добавить(новый Файл(
                oc_main.ДобавитьЧастьПути(ПараметрыПроекта.ПутьКСборкеПроекта.Путь, ["%{Расширение.Ключ}.%{РасширениеФайлаЗагрузки}"])
            ))
        ;
    иначе
        ФайлыЗагрузки.Добавить(новый Файл(
            oc_main.ДобавитьЧастьПути(ПараметрыПроекта.ПутьКСборкеПроекта.Путь, ["1Cv8.%{РасширениеФайлаЗагрузки}"])
        ))
    ;

    для Файл из ФайлыЗагрузки
         если не Файл.Существует()
            Консоль.Записать(Файл.Путь)
            продолжить
        ;
        IIBOperation.ЗагрузитьКонфигурацию(
            Файл.Путь,
            ПараметрыСоединенияИБ.СтрокаСоединения,
            ПараметрыСоединенияИБ.ПутьКФайламПлатформы,
            РежимИсполнения,
            ПараметрыСоединенияИБ.Логин,
            ПараметрыСоединенияИБ.Пароль,
            (ЭтоРасширение ? Файл.ИмяБезРасширения : "")
        )
    ;

;

@Локально
метод ЗагрузитьФайлыКонфигурации(ПараметрыПроекта: IProjectProperties.ПараметрыПроекта, ПараметрыСоединенияИБ: IProjectProperties.ПараметрыСоединенияИБ, ЭтоРасширение = Ложь)

    знч РежимИсполнения = ЭтоРасширение ? ПараметрыПроекта.РежимИСполненияРасширения : ПараметрыПроекта.РежимИСполнения

    знч ФайлыЗагрузки = новый Массив<Файл>()
    если ЭтоРасширение
        для Расширение из ПараметрыПроекта.Расширения
            ФайлыЗагрузки.Добавить(новый Файл(Расширение.Значение.Путь))
        ;
    иначе
        ФайлыЗагрузки.Добавить(новый Файл(ПараметрыПроекта.ПутьКФайламКонфигурации.Путь))
    ;

    для Файл из ФайлыЗагрузки
         если не Файл.Существует()
            Консоль.Записать(Файл.Путь)
            продолжить
        ;
        пер ФайлыДляЗагрузки: Строка|Файл = новый Файл(
            oc_main.ДобавитьЧастьПути(ПараметрыПроекта.ПутьКСборкеПроекта.Путь, ["%{Файл.ИмяБезРасширения}_in"])
        )
        если не (ФайлыДляЗагрузки как Файл).Существует()
            ФайлыДляЗагрузки = ""
        ;

        IIBOperation.ЗагрузитьФайлыКонфигурации(
            Файл.Путь,
            ПараметрыСоединенияИБ.СтрокаСоединения,
            ПараметрыСоединенияИБ.ПутьКФайламПлатформы,
            РежимИсполнения,
            ПараметрыСоединенияИБ.Логин,
            ПараметрыСоединенияИБ.Пароль,
            (ЭтоРасширение ? Файл.ИмяБезРасширения : ""),
            ФайлыДляЗагрузки
        )
    ;

;

@Локально
метод ЗагрузитьПатчКонфигурации(ПараметрыПроекта: IProjectProperties.ПараметрыПроекта, ПараметрыСоединенияИБ: IProjectProperties.ПараметрыСоединенияИБ, ПолучитьФайлСравнения = Ложь)

    знч КаталогСборкиПатча = новый Файл(
        oc_main.ДобавитьЧастьПути(ПараметрыПроекта.ПутьКВременнымФайлам.Путь, [IProjectProperties.ИМЯ_КАТАЛОГА_ПАТЧА])
    )
    знч ФайлЗагрузкиПатча  = новый Файл(
        oc_main.ДобавитьЧастьПути(ПараметрыПроекта.ПутьКСборкеПроекта.Путь, ["%{IProjectProperties.ИМЯ_КАТАЛОГА_ПАТЧА}_in"])
    )

    если не КаталогСборкиПатча.Существует()
        или не ФайлЗагрузкиПатча.Существует()
        возврат
    ;

    IIBOperation.ЗагрузитьФайлыКонфигурации(
        //(ФайлДляЗагрузки.Существует() ? ФайлДляЗагрузки.Путь : КаталогСборкиПатча.Путь),
        КаталогСборкиПатча.Путь,
        ПараметрыСоединенияИБ.СтрокаСоединения,
        ПараметрыСоединенияИБ.ПутьКФайламПлатформы,
        ПараметрыПроекта.РежимИСполнения,
        ПараметрыСоединенияИБ.Логин,
        ПараметрыСоединенияИБ.Пароль,
        "",
        ФайлЗагрузкиПатча)

    // После загрузки патча обновляется файл версии конфигурации в каталоге загрузки
    // Необходимо обновить основной файл версии конфигурации
    знч НовыйФайлВерсийКонфигурации = IConfiguration.ПолучитьФайлConfigDumpInfo(КаталогСборкиПатча.Путь)
    Файлы.Скопировать(НовыйФайлВерсийКонфигурации, ПараметрыПроекта.ФайлВерсийКонфигурации)

    IConfiguration.СброситьФайлПоставщика(КаталогСборкиПатча.Путь)

    если ПолучитьФайлСравнения
        IIBOperation.СравнитьКонфигурации(
            oc_main.ДобавитьЧастьПути(ПараметрыПроекта.ПутьКВременнымФайлам.Путь, ["ИзмененияВКонфигурации.mxl"]),
            ПараметрыСоединенияИБ.СтрокаСоединения,
            ПараметрыСоединенияИБ.ПутьКФайламПлатформы,
            ПараметрыСоединенияИБ.Логин,
            ПараметрыСоединенияИБ.Пароль,
            oc_main.РежимыСравнения.СравнитьСКонфигурациейИБ)
    ;
;

@Локально
метод ВывестиИнформациюПоПроектам(Проекты: Массив<Строка>, СтатусСборки = 1)

    если не Проекты.Пусто() и СтатусСборки == 1
        Консоль.Записать("\нСобранные проекты:")
    иначе если не Проекты.Пусто() и СтатусСборки == 2
        Консоль.Записать("\нОШИБОЧНЫЕ проекты:")
    ;

    для ИмяПроекта из Проекты
        Консоль.Записать(ИмяПроекта)
    ;

;

@Локально
метод ПолучитьВременныйКаталог(ПараметрыПроекта: IProjectProperties.ПараметрыПроекта, ИмяКаталога: Строка, Версия = "") : Файл

    пер ПутьКВременномуКаталогу = ""
    если ПараметрыПроекта.ПутьКВременнымФайлам.ОтносительныйПуть.Пусто()
        ПутьКВременномуКаталогу = Файлы.СоздатьВременныйКаталог().Путь
    иначе
        ПутьКВременномуКаталогу = oc_main.ДобавитьЧастьПути(
            ПараметрыПроекта.ПутьКВременнымФайлам.ОтносительныйПуть,
            [ИмяКаталога + (Версия.Пусто() ? "" : "_%{Версия.Заменить(".", "_")}")]
        )
    ;

    знч ВременныйКаталог = новый Файл(ПутьКВременномуКаталогу)

    возврат ВременныйКаталог
;

@Локально
метод УдалитьФайлСКонтролемОшибок(УдаляемыйФайл: Файл|Строка, ОчиститьКаталог = Ложь)

    знч Файл = УдаляемыйФайл.ПолучитьТип() == Тип<Строка> ? новый Файл(УдаляемыйФайл как Строка) : УдаляемыйФайл как Файл

    попытка
        знч ЭтоКаталог = Файл.ЭтоКаталог()
        если Файл.Существует()
            Файлы.Удалить(Файл)
        ;
        если ЭтоКаталог и ОчиститьКаталог
            Файлы.СоздатьКаталог(Файл)
        ;
        если ЭтоКаталог
            Консоль.Записать("\нКаталог %{Файл.Путь} очищен")
        иначе
            Консоль.Записать("\нФайл %{Файл.Путь} очищен")
        ;
    поймать Исключение: Исключение
        если не Исключение.Описание.Пусто()
            Консоль.Записать("\н#################################################################")
            Консоль.Записать(Исключение.Описание)
            Консоль.Записать("#################################################################")
        ;
    ;
;