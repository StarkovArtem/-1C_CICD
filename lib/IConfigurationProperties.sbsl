#!/usr/bin/executor

#требуется ILogging.sbsl

@Глобально
структура СтруктураКонфигурации

    знч ПутьКФайламКонфигурации: Строка
    знч Метаданные: Соответствие<Строка, ОбъектМетаданных>
    пер НастройкиПоддержки: НастройкиПоддержки
    пер Версия: Строка
    пер Хеш: Строка
    пер ТекстФайлыДляЗагрузки: Строка
    пер ТекстФайлыДляВыгрузки: Строка
;

@Глобально
структура ОбъектМетаданных

    знч Идентификатор: Идентификатор
    знч Имя: Строка
    знч Версия: Строка
    пер ОтличаютсяПравилаПользователяПодчиненных: Булево
    пер ОтличаютсяПравилаПоставщикаПодчиненных: Булево
    знч Элементы: Массив<ОбъектМетаданных>
    знч Файлы: Соответствие<Строка, Строка>
    пер Хеш: Строка

;

@Глобально
структура НастройкиПоддержки

    знч НачальныеДанные: Массив<Строка>
    знч Идентификаторы: Соответствие<Строка, Идентификатор>
    знч КонечныеДанные: Массив<Строка>

;

@Глобально
структура Идентификатор

    знч ГУИД: Строка
    знч ГУИДПоставщика: Строка
    пер Имя: Строка
    пер ПравилаПользователя: Строка
    пер ПравилаПоставщика: Строка
    пер Исправить: Булево

;

@Глобально
перечисление РежимОбработки

    Основной
    ПолучитьПоВерсиям
    ПолучитьПоПоддержке
    ПолучитьДляПоставщика

;

@Глобально
перечисление СтатусыПоддержки

    НаПоддержке
    ПоВерсиям
    ПоПоддержке
    ДляПоставщика

;

// ПрограмнныйИнтерфейс

@Глобально
метод РассчитатьХешКаталога(ПутьККаталогу: Строка, ХешированиеДанных: ХешированиеДанных | Неопределено = Неопределено, Замер = Ложь): Строка

    знч ВремяИсполненияОпераций = новый ILogging.ВремяИсполненияОпераций()
    если Замер
        ВремяИсполненияОпераций.НачатьЗамер("РассчитатьХешКаталога")
    ;

    знч КаталогФайлов = новый Файл(ПутьККаталогу)
    если не КаталогФайлов.Существует()
        возврат ""
    ;
    
    знч НастройкиПоискаФайлов = новый НастройкиПоискаФайлов()
        .ИсключитьКаталоги(Истина)
        .ИсключитьСсылки(Истина)
    знч ФайлыКаталога = Файлы.Найти(ПутьККаталогу, НастройкиПоискаФайлов)

    пер РассчитатьХеш = Ложь
    если ХешированиеДанных == Неопределено
        ХешированиеДанных = новый ХешированиеДанных(АлгоритмХеширования.Md5)
        РассчитатьХеш = Истина
    ;

    для Файл из ФайлыКаталога
        исп ПотокЧтения = Файл.ОткрытьПотокЧтения()
        ХешированиеДанных.ДобавитьДанные(ПотокЧтения)
        ПотокЧтения.Закрыть()
    ;

    пер ХешКаталога = ""
    если РассчитатьХеш
        ХешКаталога = ХешированиеДанных.Результат.ВСтроку()
    ;

    если Замер
        ВремяИсполненияОпераций.ЗавершитьЗамер("РассчитатьХешКаталога")
    ;

    возврат ХешКаталога

;

@Глобально
метод РассчитатьХешФайла(ПутьКФайлу: Строка, ХешированиеДанных: ХешированиеДанных | Неопределено = Неопределено, Замер = Ложь): Строка

    знч ВремяИсполненияОпераций = новый ILogging.ВремяИсполненияОпераций()
    если Замер
        ВремяИсполненияОпераций.НачатьЗамер("РассчитатьХешФайла")
    ;

    знч Файл = новый Файл(ПутьКФайлу)
    если не Файл.Существует()
        возврат ""
    ;

    пер РассчитатьХеш = Ложь
    если ХешированиеДанных == Неопределено
        ХешированиеДанных = новый ХешированиеДанных(АлгоритмХеширования.Md5)
        РассчитатьХеш = Истина
    ;

    исп ПотокЧтения = Файл.ОткрытьПотокЧтения()
    ХешированиеДанных.ДобавитьДанные(ПотокЧтения)
    ПотокЧтения.Закрыть()

    пер ХешФайла = ""
    если РассчитатьХеш
        ХешФайла = ХешированиеДанных.Результат.ВСтроку()
    ;

    если Замер
        ВремяИсполненияОпераций.ЗавершитьЗамер("РассчитатьХешФайла")
    ;

    возврат ХешФайла

;