#!/usr/bin/executor

@Глобально
перечисление ОперационныеСистемы
    Windows,
    Linux
;

@Глобально
перечисление РежимыИсполнения

    Платформа
    АвтономныйСервер
    РежимАгента

;

@Глобально
перечисление РежимыСравнения

    СравнитьСКонфигурациейИБ
    СравнитьСКонфигурациейПоставщика

;

@Глобально
метод ПутьКФайламПлатформы(ВерсияПлатформы: Строка, ПутьКВерсиямПлатформы = ""): Строка
    
    возврат ПутьКФайламПлатформыПоМаксимальнойСборке(ВерсияПлатформы, ПутьКВерсиямПлатформы)
;

@Глобально
метод ИсполняемыйФайлПлатформы(ПутьКФайламПлатформы: Строка, ИспользуетсяАвтономныйСервер = Ложь): Строка

    возврат ДобавитьЧастьПути(ПутьКФайламПлатформы, [(ИспользуетсяАвтономныйСервер ? "ibcmd" : "1cv8")])

;

@Глобально
метод ЭтоСервернаяИБ(ПутьКИБ: Строка): Булево

    возврат ПутьКИБ.Содержит("Srvr=")
;

@Глобально
метод ЭтоФайловаяИБ(ПутьКИБ: Строка): Булево

    возврат ПутьКИБ.Содержит("File=")
;

@Глобально
метод ЭтоСтрокаСоединения(ПутьКИБ: Строка): Булево

    возврат ЭтоСервернаяИБ(ПутьКИБ) или ЭтоФайловаяИБ(ПутьКИБ)
;

@Глобально
метод ПреобразоватьВСтрокуСоединения(ПутьКИБ: Строка): Строка

    если ЭтоСтрокаСоединения(ПутьКИБ)
        возврат ПутьКИБ
    ;

    возврат "\"File=\"\"%{ПутьКИБ}\"\"\""
;

@Глобально
метод ПреобразоватьВПутьКИнформационнойБазе(СтрокаСоединения: Строка): Строка

    если не ЭтоФайловаяИБ(СтрокаСоединения)
        возврат СтрокаСоединения
    ;

    возврат СтрокаСоединения.Заменить("\"File=\"\"", "").Заменить("\"\";\"", "")
;

@Глобально
метод ЭтоАбсолютныйПуть(Путь: Строка): Булево

    знч СР = Файлы.СимволРазделителя

    возврат Путь.Содержит(":") или Путь.НачинаетсяС(СР) или Путь.НачинаетсяС("~")
;

@Глобально
метод ИспользуемаяОС(): ОперационныеСистемы
    знч имяОС = СредаИсполнения.ПолучитьСвойство("os.name")

    выбор когда имяОС.НачинаетсяС("windows", Истина)
        возврат ОперационныеСистемы.Windows

    когда имяОС.Содержит("nux", Истина)
        возврат ОперационныеСистемы.Linux

    иначе
        выбросить новый ИсключениеНедопустимоеСостояние("Неизвестная ОС")
    ;
;

@Глобально
метод ДобавитьЧастьПути(Путь: Строка, Части: Массив<Строка>): Строка

    возврат ИзменитьЧастьПути(Путь, Части, "+")
;

@Глобально
метод УдалитьЧастьПути(Путь: Строка, Части: Массив<Строка>): Строка

    возврат ИзменитьЧастьПути(Путь, Части, "-")
;

@Глобально
метод ИсправитьРазделителиПути(Путь: Строка): Строка

    знч СР = Файлы.СимволРазделителя
    возврат Путь.Заменить("/", СР).Заменить("\\", СР)

;

@Локально
метод ИзменитьЧастьПути(Путь: Строка, Части: Массив<Строка>, Режим: Строка): Строка

    знч СР = Файлы.СимволРазделителя

    пер ФорматПуть = Путь + (Путь.ЗаканчиваетсяНа(СР) или Путь.Пусто() ? "" : СР)

    пер УдалитьНачальныйСимвол = Ложь

    для Часть из Части
        если Часть.Пусто()
            продолжить
        ;
        пер ФорматЧасть = Часть
        пока Режим == "+" и ФорматЧасть.НачинаетсяС(СР)
            ФорматЧасть = ФорматЧасть.ПодстрокаСКонца(ФорматЧасть.Длина() - 1)
        ;
        пока Режим == "-" и ФорматЧасть.ЗаканчиваетсяНа(СР)
            ФорматЧасть = ФорматЧасть.ПодстрокаСНачала(ФорматЧасть.Длина() - 1)
        ;
        если Режим == "+"
            ФорматПуть = ФорматПуть + ФорматЧасть + (ФорматЧасть.ЗаканчиваетсяНа(СР) ? "" : СР)
        иначе если Режим == "-"
            знч ЭтоОсновнойПуть = ФорматПуть.НачинаетсяС(ФорматЧасть)
            если ЭтоОсновнойПуть
                УдалитьНачальныйСимвол = Истина
            ;
            ФорматПуть = ФорматПуть.Заменить((ФорматЧасть.НачинаетсяС(СР) или ЭтоОсновнойПуть ? "" : СР) + ФорматЧасть, "", Истина)
        ;
    ;

    если ФорматПуть.ЗаканчиваетсяНа(СР)
        ФорматПуть = ФорматПуть.ПодстрокаСНачала(ФорматПуть.Длина() - 1)
    ;

    если УдалитьНачальныйСимвол и ФорматПуть.НачинаетсяС(СР)
        ФорматПуть = ФорматПуть.ПодстрокаСКонца(ФорматПуть.Длина() - 1)
    ;

    возврат ФорматПуть
;

@Локально
метод ПутьКФайламПлатформыПоМаксимальнойСборке(ВерсияПлатформы: Строка, ПутьКВерсиямПлатформы = ""): Строка

    пер ПутьКФайламПлатформы = ""
    знч используемаяОС = ИспользуемаяОС()

    если ВерсияПлатформы.КоличествоВхождений(".") == 3
        знч УстановленныеПлатформы = УстановленныеПлатформы(ПутьКВерсиямПлатформы)
        если УстановленныеПлатформы.СодержитКлюч(ВерсияПлатформы)
            ПутьКФайламПлатформы = УстановленныеПлатформы.Получить(ВерсияПлатформы)
        ;
    ;

    знч МаксимальныеПлатформы = МаксимальныеПлатформы(ПутьКВерсиямПлатформы)
    если ВерсияПлатформы.КоличествоВхождений(".") == 2 и МаксимальныеПлатформы.СодержитКлюч(ВерсияПлатформы)
        ПутьКФайламПлатформы = МаксимальныеПлатформы.Получить(ВерсияПлатформы)
    ;

    пер КлючиВерсий = новый Массив<Строка>(МаксимальныеПлатформы.Ключи())

    если ВерсияПлатформы.Пусто() и не КлючиВерсий.Пусто()
        КлючиВерсий = КлючиВерсий.Сортировать((строка1, строка2) -> строка2.Сравнить(строка1, Истина)) // по убыванию
        ПутьКФайламПлатформы = МаксимальныеПлатформы.Получить(КлючиВерсий[0])
    ;

    если не ПутьКФайламПлатформы.Пусто() и используемаяОС == ОперационныеСистемы.Windows
        возврат ДобавитьЧастьПути(ПутьКФайламПлатформы, ["bin"])
    иначе если не ПутьКФайламПлатформы.Пусто()
        возврат ПутьКФайламПлатформы
    ;

    знч текстОшибки = "Не найдена установленная платформа %ВерсияПлатформы" 
    выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
;

@Локально
метод УстановленныеПлатформы(ПутьКВерсиямПлатформы = ""): Соответствие<Строка, Строка>
    пер установленныеПлатформы: Соответствие<Строка, Строка>

    знч КаталогиПлатформы = КаталогиПлатформыПоУмолчанию()
    если не ПутьКВерсиямПлатформы.Пусто()
        КаталогиПлатформы.Добавить(новый Файл(ПутьКВерсиямПлатформы))
    ;

    знч настройкиПоискаФайлов = новый НастройкиПоискаФайлов()
        .ИсключитьФайлы(Истина)
        .МаксимальнаяГлубина(1)

    для КаталогПлатформы из КаталогиПлатформы
        если не КаталогПлатформы.Существует()
            продолжить
        ;
        знч найденныеФайлы = Файлы.Найти(КаталогПлатформы, настройкиПоискаФайлов)
        для найденныйФайл из найденныеФайлы
            если не найденныйФайл.Имя.НачинаетсяС("8.3")
                продолжить
            ;
            установленныеПлатформы.Вставить(найденныйФайл.Имя, найденныйФайл.Путь)
        ;
    ;

    возврат установленныеПлатформы
;

@Локально
метод МаксимальныеПлатформы(ПутьКВерсиямПлатформы = ""): Соответствие<Строка, Строка>

    знч УстановленныеПлатформы = УстановленныеПлатформы(ПутьКВерсиямПлатформы)
    знч МаксимальныеПлатформы: Соответствие<Строка, Строка>

    для Платформа из УстановленныеПлатформы

        знч СоставПлатформы = Платформа.Ключ.Разделить(".")

        пер релизБезВерсииМассивом = новый Массив<Строка>(СоставПлатформы)
        релизБезВерсииМассивом.УдалитьПоИндексу(3)

        знч релизБезВерсии = Строки.Соединить(релизБезВерсииМассивом, ".")

        если не МаксимальныеПлатформы.СодержитКлюч(релизБезВерсии)
            МаксимальныеПлатформы.ВставитьЕслиОтсутствует(релизБезВерсии, Платформа.Значение)
        продолжить
        ;

        знч последнийРелиз = МаксимальныеПлатформы.Получить(релизБезВерсии)
        знч разложенныйПоследнийРелиз = последнийРелиз.Разделить(".")

        если СоставПлатформы[3] > разложенныйПоследнийРелиз[3]
            МаксимальныеПлатформы.Вставить(релизБезВерсии, Платформа.Значение)
        ;
    ;

    возврат МаксимальныеПлатформы
;

@Локально
метод КаталогиПлатформыПоУмолчанию(): Массив<Файл>
    
    пер Каталоги: Массив<Файл>
    знч используемаяОС = ИспользуемаяОС()

    выбор используемаяОС
    когда ОперационныеСистемы.Windows
        знч Каталог32 = СредаИсполнения.ПолучитьПеременную("ProgramFiles(x86)")
        Каталоги.Добавить(новый Файл(ДобавитьЧастьПути(Каталог32, ["1Cv8"])))
        знч Каталог64 = СредаИсполнения.ПолучитьПеременную("ProgramFiles")
        Каталоги.Добавить(новый Файл(ДобавитьЧастьПути(Каталог64, ["1Cv8"])))
    когда ОперационныеСистемы.Linux
        Каталоги.Добавить(новый Файл(ДобавитьЧастьПути("/", ["opt", "1cv8", "x86_64"])))
    ;

    возврат Каталоги
;