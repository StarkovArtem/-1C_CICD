#!/usr/bin/executor

@Глобально
перечисление ОперационныеСистемы
    Windows,
    Linux
;

@Глобально
метод ПутьКФайламПлатформы(ВерсияПлатформы: Строка): Строка
    
    возврат ПутьКФайламПлатформыПоМаксимальнойСборке(ВерсияПлатформы)
;

@Глобально
метод ИсполняемыйФайлПлатформы(ПутьКФайламПлатформы: Строка, ИспользуетсяАвтономныйСервер = Ложь): Строка
    
    знч СР = Файлы.СимволРазделителя
    возврат "%{ПутьКФайламПлатформы}%{СР}" + (ИспользуетсяАвтономныйСервер ? "ibcmd" : "1cv8")
;

@Глобально
метод ЭтоСервернаяИБ(ПутьКИБ: Строка): Булево

    возврат ПутьКИБ.Содержит("Srvr=")
;

@Глобально
метод ЭтоФайловаяИБ(ПутьКИБ: Строка): Булево

    возврат ПутьКИБ.Содержит("File=")
;

@Глобально
метод ЭтоСтрокаСоединения(ПутьКИБ: Строка): Булево

    возврат ЭтоСервернаяИБ(ПутьКИБ) или ЭтоФайловаяИБ(ПутьКИБ)
;

@Глобально
метод ПреобразоватьВСтрокуСоединения(ПутьКИБ: Строка): Строка

    если ЭтоСтрокаСоединения(ПутьКИБ)
        возврат ПутьКИБ
    ;

    возврат "\"File=\"\"%{ПутьКИБ}\"\"\""
;

@Глобально
метод ИспользуемаяОС(): ОперационныеСистемы
    знч имяОС = СредаИсполнения.ПолучитьСвойство("os.name")

    выбор когда имяОС.НачинаетсяС("windows", Истина)
        возврат ОперационныеСистемы.Windows

    когда имяОС.Содержит("nux", Истина)
        возврат ОперационныеСистемы.Linux

    иначе
        выбросить новый ИсключениеНедопустимоеСостояние("Неизвестная ОС")
    ;
;

@Локально
метод ПутьКФайламПлатформыПоМаксимальнойСборке(ВерсияПлатформы: Строка): Строка
    
    знч СР = Файлы.СимволРазделителя
    пер ПутьКФайламПлатформы = ""
    знч используемаяОС = ИспользуемаяОС()
    
    если ВерсияПлатформы.КоличествоВхождений(".") == 3
        знч установленныеПлатформы = УстановленныеПлатформы()
        если установленныеПлатформы.СодержитКлюч(ВерсияПлатформы)
            ПутьКФайламПлатформы = установленныеПлатформы.Получить(ВерсияПлатформы)
        ;
    ;

    знч максимальныеПлатформы = МаксимальныеПлатформы()    
    если ВерсияПлатформы.КоличествоВхождений(".") == 2 и максимальныеПлатформы.СодержитКлюч(ВерсияПлатформы)
        ПутьКФайламПлатформы = максимальныеПлатформы.Получить(ВерсияПлатформы)
    ;
    
    пер КлючиВерсий = новый Массив<Строка>(максимальныеПлатформы.Ключи())
    
    если ВерсияПлатформы.Пусто() и не КлючиВерсий.Пусто()
        КлючиВерсий = КлючиВерсий.Сортировать((строка1, строка2) -> строка2.Сравнить(строка1, Истина)) // по убыванию
        ПутьКФайламПлатформы = максимальныеПлатформы.Получить(КлючиВерсий[0])
    ;
    
    если не ПутьКФайламПлатформы.Пусто() и используемаяОС == ОперационныеСистемы.Windows
        возврат "%{ПутьКФайламПлатформы}%{СР}bin"
    иначе
        возврат ПутьКФайламПлатформы
    ;
    
    знч текстОшибки = "Не найдена установленная платформа %ВерсияПлатформы" 
    выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
;

@Локально
метод УстановленныеПлатформы(): Соответствие<Строка, Строка>
    пер установленныеПлатформы: Соответствие<Строка, Строка>

    знч каталогиПлатформы = КаталогиПлатформы()

    знч настройкиПоискаФайлов = новый НастройкиПоискаФайлов()
    настройкиПоискаФайлов.ИсключитьФайлы(Истина)
    настройкиПоискаФайлов.МаксимальнаяГлубина(1)

    для каталогПлатформы из каталогиПлатформы
        попытка
            знч найденныеФайлы = Файлы.Найти(каталогПлатформы, настройкиПоискаФайлов)
            для найденныйФайл из найденныеФайлы
                если не найденныйФайл.Имя.НачинаетсяС("8.3")
                    продолжить
                ;
                установленныеПлатформы.Вставить(найденныйФайл.Имя, найденныйФайл.Путь)
            ;
        поймать Исключение: ИсключениеФайловойСистемы 
            // не обрабатываем отсутствие каталога 1Cv8
        ;
    ;

    возврат установленныеПлатформы
;

@Локально
метод МаксимальныеПлатформы(): Соответствие<Строка, Строка>
        знч установленныеПлатформы = УстановленныеПлатформы()

    пер максимальныеПлатформы: Соответствие<Строка, Строка>

    для платформа из установленныеПлатформы
        знч разложенныйТекущийРелиз = платформа.Ключ.Разделить(".")

        пер релизБезВерсииМассивом = новый Массив<Строка>(разложенныйТекущийРелиз)
        релизБезВерсииМассивом.УдалитьПоИндексу(3)

        знч релизБезВерсии = Строки.Соединить(релизБезВерсииМассивом, ".")

        если не максимальныеПлатформы.СодержитКлюч(релизБезВерсии)
            максимальныеПлатформы.Вставить(релизБезВерсии, платформа.Значение)
        продолжить
        ;

        знч последнийРелиз = максимальныеПлатформы.Получить(релизБезВерсии)
        знч разложенныйПоследнийРелиз = последнийРелиз.Разделить(".")

        если разложенныйТекущийРелиз[3] > разложенныйПоследнийРелиз[3]
            максимальныеПлатформы.Вставить(релизБезВерсии, платформа.Значение)
        ;
    ;

    возврат максимальныеПлатформы
;

@Локально
метод КаталогиПлатформы(): Массив<Строка>
    
    пер Каталоги: Массив<Строка>
    знч используемаяОС = ИспользуемаяОС()
    знч СР = Файлы.СимволРазделителя

    выбор используемаяОС
    когда ОперационныеСистемы.Windows
        знч Каталог32 = СредаИсполнения.ПолучитьПеременную("ProgramFiles(x86)")
        Каталоги.Добавить("%{Каталог32}%{СР}1Cv8")
        знч Каталог64 = СредаИсполнения.ПолучитьПеременную("ProgramFiles")
        Каталоги.Добавить("%{Каталог64}%{СР}1Cv8")
    когда ОперационныеСистемы.Linux
        Каталоги.Добавить("%{СР}opt%{СР}1cv8%{СР}x86_64")
    ;

    возврат Каталоги
;