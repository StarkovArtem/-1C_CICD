#!/usr/bin/executor

конст КОДИРОВКА = "UTF-8"

// ПрограммныйИнтерфейс

@Глобально
метод СоздатьИнформационнуюБазу(ПутьКИнформационнойБазе: Строка, ИсполняемыйФайлПлатформы: Строка)

    пер ПараметрыПроцесса = новый Массив<Строка>()
    ПараметрыПроцесса.Добавить("infobase")
    ПараметрыПроцесса.Добавить("--db-path")
    ПараметрыПроцесса.Добавить(ПутьКИнформационнойБазе)
    ПараметрыПроцесса.Добавить("create")
    ПараметрыПроцесса.Добавить("--force")

    ВыполнитьКомандуПлатформыСОжиданием(ИсполняемыйФайлПлатформы, ПараметрыПроцесса)

    Консоль.Записать("ИБ успешно создана")
;

@Глобально
метод ЗагрузитьКонфигурацию(ПутьКФайлуСборки: Строка, ПутьКИнформационнойБазе: Строка, ИсполняемыйФайлПлатформы: Строка,
                ИмяПользователя = "", Пароль = "", ИмяРасширения = "")
    
    пер ПараметрыПроцесса = новый Массив<Строка>()
    ПараметрыПроцесса.Добавить("infobase")
    ПараметрыПроцесса.Добавить("--db-path")
    ПараметрыПроцесса.Добавить(ПутьКИнформационнойБазе)
   ПараметрыПроцесса.Добавить("config")
    ПараметрыПроцесса.Добавить("load")
    если не ИмяРасширения.Пусто()
        ПараметрыПроцесса.Добавить("--extension=%{ИмяРасширения}")
    ;
    ПараметрыПроцесса.Добавить(ПутьКФайлуСборки)
    если не ИмяПользователя.Пусто()
        ПараметрыПроцесса.Добавить("--user=%{ИмяПользователя}")
        ПараметрыПроцесса.Добавить("--password=%{Пароль}")
    ;

    ВыполнитьКомандуПлатформыСОжиданием(ИсполняемыйФайлПлатформы, ПараметрыПроцесса)

    Консоль.Записать("XML файлы успешно загружены в ИБ")
;

@Глобально
метод ЗагрузитьФайлыКонфигурации(ПутьКФайламПроекта: Строка, ПутьКИнформационнойБазе: Строка, ИсполняемыйФайлПлатформы: Строка,
                        ИмяПользователя = "", Пароль = "", ИмяРасширения = "", ПутьКФайлуЗагрузки = "")

    пер ПараметрыПроцесса = новый Массив<Строка>()
    ПараметрыПроцесса.Добавить("infobase")
    ПараметрыПроцесса.Добавить("--db-path")
    ПараметрыПроцесса.Добавить(ПутьКИнформационнойБазе)
    ПараметрыПроцесса.Добавить("config")
    ПараметрыПроцесса.Добавить("import")
    если не ИмяРасширения.Пусто()
        ПараметрыПроцесса.Добавить("--extension=%{ИмяРасширения}")
    ;
    если не ПутьКФайлуЗагрузки.Пусто()
        ПараметрыПроцесса.Добавить("files")
        ПараметрыПроцесса.Добавить("--no-check")
        ПараметрыПроцесса.Добавить("--partial")
        если ПутьКФайламПроекта.ЗаканчиваетсяНа(".zip")
            ПараметрыПроцесса.Добавить("--archive=%{ПутьКФайламПроекта}")
        иначе
            ПараметрыПроцесса.Добавить("--base-dir=%{ПутьКФайламПроекта}")
        ;
        знч ФайлыЗагрузки = новый Файл(ПутьКФайлуЗагрузки).ОткрытьПотокЧтения().ПрочитатьКакСтроку()
        для ПутьКФайлу из ФайлыЗагрузки.Разделить(Символы.НОВАЯ_СТРОКА)
            ПараметрыПроцесса.Добавить(ПутьКФайлу)
        ;
    иначе
        ПараметрыПроцесса.Добавить(ПутьКФайламПроекта)
    ;
    если не ИмяПользователя.Пусто()
        ПараметрыПроцесса.Добавить("--user=%{ИмяПользователя}")
        ПараметрыПроцесса.Добавить("--password=%{Пароль}")
    ;

    ВыполнитьКомандуПлатформыСОжиданием(ИсполняемыйФайлПлатформы, ПараметрыПроцесса)

    Консоль.Записать("XML файлы успешно загружены в ИБ")
;

@Глобально
метод ВыгрузитьКонфигурацию(ПутьКФайлуСборки: Строка, ПутьКИнформационнойБазе: Строка, ИсполняемыйФайлПлатформы: Строка,
                ИмяПользователя = "", Пароль = "", ИмяРасширения = "")

    пер ПараметрыПроцесса = новый Массив<Строка>()
    ПараметрыПроцесса.Добавить("infobase")
    ПараметрыПроцесса.Добавить("--db-path")
    ПараметрыПроцесса.Добавить(ПутьКИнформационнойБазе)
    ПараметрыПроцесса.Добавить("config")
    ПараметрыПроцесса.Добавить("save")
    если не ИмяРасширения.Пусто()
        ПараметрыПроцесса.Добавить("--extension=%{ИмяРасширения}")
    ;
    ПараметрыПроцесса.Добавить(ПутьКФайлуСборки)
    если не ИмяПользователя.Пусто()
        ПараметрыПроцесса.Добавить("--user=%{ИмяПользователя}")
        ПараметрыПроцесса.Добавить("--password=%{Пароль}")
    ;

    ВыполнитьКомандуПлатформыСОжиданием(ИсполняемыйФайлПлатформы, ПараметрыПроцесса)

    Консоль.Записать("Файл успешно создан: %ПутьКФайлуСборки")
;

@Глобально
метод ВыгрузитьФайлыКонфигурации(ПутьКФайламПроекта: Строка, ПутьКИнформационнойБазе: Строка, ИсполняемыйФайлПлатформы: Строка,
            ИмяПользователя = "", Пароль = "", ИмяРасширения = "", ТолькоDumpConfig = Ложь, ПутьКФайлуВыгрузки = "", ПутьКФайлуВерсии = "")

    пер ПараметрыПроцесса = новый Массив<Строка>()
    ПараметрыПроцесса.Добавить("infobase")
    ПараметрыПроцесса.Добавить("--db-path")
    ПараметрыПроцесса.Добавить(ПутьКИнформационнойБазе)
    ПараметрыПроцесса.Добавить("config")
    ПараметрыПроцесса.Добавить("export")
    если не ИмяРасширения.Пусто()
        ПараметрыПроцесса.Добавить("--extension=%{ИмяРасширения}")
    ;
    пер ОсновнаяВыгрузка = Ложь
    если ТолькоDumpConfig
        ПараметрыПроцесса.Добавить("info")
        ПараметрыПроцесса.Добавить("--out=%{ПутьКФайламПроекта}") // ошибка платформы, пока указывается каталог, а не файл ConfigDumpInfo.xml
    иначе если не ПутьКФайлуВыгрузки.Пусто()
        ПараметрыПроцесса.Добавить("objects")
        ПараметрыПроцесса.Добавить("--out=%{ПутьКФайламПроекта}")
        // ПараметрыПроцесса.Добавить("--recursive")
        знч ОбъектыВыгрузки = новый Файл(ПутьКФайлуВыгрузки).ОткрытьПотокЧтения().ПрочитатьКакСтроку()
        для Объект из ОбъектыВыгрузки.Разделить(Символы.НОВАЯ_СТРОКА)
            ПараметрыПроцесса.Добавить(Объект)
        ;
    иначе
        ОсновнаяВыгрузка = Истина
    ;
    если не ПутьКФайлуВерсии.Пусто()
        ПараметрыПроцесса.Добавить("--base=%{ПутьКФайлуВерсии}")
    ;
    ПараметрыПроцесса.Добавить("--threads=4")
    если ОсновнаяВыгрузка
        ПараметрыПроцесса.Добавить(ПутьКФайламПроекта)
    ;
    если не ИмяПользователя.Пусто()
        ПараметрыПроцесса.Добавить("--user=%{ИмяПользователя}")
        ПараметрыПроцесса.Добавить("--password=%{Пароль}")
    ;

    ВыполнитьКомандуПлатформыСОжиданием(ИсполняемыйФайлПлатформы, ПараметрыПроцесса)

    Консоль.Записать("XML файлы успешно выгружены: %ПутьКФайламПроекта")
;

@Глобально
метод ПолучитьСтатусКонфигурации(ПутьКФайлуСтатуса: Строка, ПутьКИнформационнойБазе: Строка, ИсполняемыйФайлПлатформы: Строка,
            ИмяПользователя = "", Пароль = "", ИмяРасширения = "", ПутьКФайлуВерсии = "")

    пер ПараметрыПроцесса = новый Массив<Строка>()
    ПараметрыПроцесса.Добавить("infobase")
    ПараметрыПроцесса.Добавить("--db-path")
    ПараметрыПроцесса.Добавить(ПутьКИнформационнойБазе)
    ПараметрыПроцесса.Добавить("config")
    ПараметрыПроцесса.Добавить("export")
    если не ИмяРасширения.Пусто()
        ПараметрыПроцесса.Добавить("--extension=%{ИмяРасширения}")
    ;
    ПараметрыПроцесса.Добавить("status")
    ПараметрыПроцесса.Добавить("--out=%{ПутьКФайлуСтатуса}") // ошибка платформы, пока указывается каталог, а не файл ConfigDumpInfo.xml
    ПараметрыПроцесса.Добавить("--base=%{ПутьКФайлуВерсии}")
    если не ИмяПользователя.Пусто()
        ПараметрыПроцесса.Добавить("--user=%{ИмяПользователя}")
        ПараметрыПроцесса.Добавить("--password=%{Пароль}")
    ;

    ВыполнитьКомандуПлатформыСОжиданием(ИсполняемыйФайлПлатформы, ПараметрыПроцесса)

    Консоль.Записать("Статус конфигурации успешно получен: %ПутьКФайлуСтатуса")
;

@Глобально
метод ВыполнитьПроверкуКонфигурации(ПутьКИнформационнойБазе: Строка, ИсполняемыйФайлПлатформы: Строка,
            ИмяПользователя = "", Пароль = "", ИмяРасширения = "")

    пер ПараметрыПроцесса = новый Массив<Строка>()
    ПараметрыПроцесса.Добавить("infobase")
    ПараметрыПроцесса.Добавить("--db-path")
    ПараметрыПроцесса.Добавить(ПутьКИнформационнойБазе)
    ПараметрыПроцесса.Добавить("config")
    ПараметрыПроцесса.Добавить("check")
    если не ИмяРасширения.Пусто() и не ИмяРасширения == "AllExtensions"
        ПараметрыПроцесса.Добавить("--extension=%{ИмяРасширения}")
    ;
    если не ИмяПользователя.Пусто()
        ПараметрыПроцесса.Добавить("--user=%{ИмяПользователя}")
        ПараметрыПроцесса.Добавить("--password=%{Пароль}")
    ;

    ВыполнитьКомандуПлатформыСОжиданием(ИсполняемыйФайлПлатформы, ПараметрыПроцесса)

    Консоль.Записать("Проверка конфигурации завершена")
;

// СлужебныеПроцедурыИФункции

@Локально
метод ВыполнитьКомандуПлатформыСОжиданием(имяКоманды: Строка, параметры: Массив<Строка>, таймаут: Длительность = 0с)
    
    пер параметрыСтрокой = ""
    для параметр из параметры
        знч кавычки = параметр.Содержит(" ")
        параметрыСтрокой = параметрыСтрокой + " " + (кавычки ? "\"" : "") + параметр + (кавычки ? "\"" : "")
    ;
    параметрыСтрокой = параметрыСтрокой.Сократить()
    Строки.Соединить(параметры, "\" \"")
    Консоль.Записать("=================================================================")
    Консоль.Записать("\"%имяКоманды\" %параметрыСтрокой")
    Консоль.Записать("=================================================================")
    пер процесс = новый ПроцессОс(имяКоманды, параметры)
    процесс.Запустить()

    пер времяОжидания = 0с

    пока не процесс.ОжидатьЗавершения(60с) и процесс.Живой()
        
        если таймаут != 0с и таймаут <= времяОжидания
            пер текстОшибки = "При выполнении команды платформы превышено время ожидания выполнения %таймаут"
            процесс.Остановить()
            выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
        ;
        времяОжидания += 60с
    ;

    пер кодВозврата = Неопределено
    
    кодВозврата = процесс.ПолучитьКодВозврата()
    знч ТекстЛога = процесс.ПолучитьПотокВывода().ПрочитатьКакСтроку(КОДИРОВКА)
    Консоль.Записать(ТекстЛога)

    если процесс.Живой()
        процесс.Остановить()
    ;

    если кодВозврата == 0 или кодВозврата == Неопределено
        возврат
    ;

    Консоль.Записать("Код возврата: %кодВозврата")

    выбросить новый ИсключениеНедопустимоеСостояние()
;