#!/usr/bin/executor

/*******************************************************************************
 * Основная кодовая база взята из скрипта Александра Капралова:
 * https://github.com/DoublesunRUS/devscripts/blob/master/GitLab-CI/.1cicd.json
 * 
 * Разработчик:
 *    Евгений Щеглов, 1С-Рарус Самара
 *    Сергей Агибалов, 1С-Рарус Самара
 *
 ******************************************************************************/

// Область. Инициализация переменных

конст ИМЯ_ФАЙЛА_НАСТРОЕК = "build_config.json"
конст ИМЯ_ФАЙЛА_ХЕШЕЙ    = "ProjectsHash.json" // файл хешей в каталоге BIN_DIR
конст ИМЯ_ПАТЧА          = "cf_patch"
конст ИМЯ_КОНФИГУРАЦИИ   = "cf"

структура Настройки
    знч EXT_NAMES: Массив<Строка> // имена расширений
    знч BIN_DIR: Строка           // каталог, в котором соберутся файлы cf и cfe
    знч SRC_CF: Строка            // каталог выгрузки файлов конфигурации в формате xml 
    знч SRC_CFE: Строка           // каталог выгрузки файлов расширений в формате xml
    знч PLATFORM_VERSION: Строка  // версия платформы
    знч USE_IBCMD: Булево         // использовать автономный сервер
;

структура ПараметрыПроекта
    знч РабочийКаталог: Строка                 // рабочий каталог выполнения скрипта
    знч ПутьКСборкеПроекта: Строка             // путь к собранным файлам проекта
    знч ПутьКФайламПроекта: Строка             // путь к исходным файлам проекта
    знч ИсполняемыйФайлПлатформы: Строка       // путь к исполняемому файлу платформы
    знч ИспользуетсяАвтономныйСервер: Булево   // признак использования автономного сервера
    знч Расширения: Массив<Строка>             // список расширений проекта
;

структура ХешиПроектов
    пер PROJECTS: Соответствие<Строка, Строка>
    знч IB_CONNECTION_STRING: Строка
    пер IB_LOGIN: Строка
    пер IB_PASSWD: Строка
    конструктор()
;

перечисление ОперационныеСистемы
    Windows,
    MacOS,
    Linux
;

// Конец области. Инициализация переменных

// Область. Точка входа

метод Скрипт(Режим: Строка, ПутьДоРепозитория: Строка, Пауза: Число)

    пер СтатусВыполнения = Ложь
    знч СР = Файлы.СимволРазделителя

    если ПутьДоРепозитория.Пусто()
        если Пауза > 0
            Консоль.СчитатьСтроку("Не задан путь до репозитрия. Нажмите Enter...")
        ;
        выбросить новый ИсключениеНедопустимоеСостояние()
    ;

    ПутьДоРепозитория.Заменить("/", СР)
    ПутьДоРепозитория.Заменить("\\", СР)

    попытка

        Скрипт.УстановитьРабочийКаталог(Скрипт.ПолучитьРабочийКаталог() + СР + ПутьДоРепозитория)

        выбор Режим.ВНижнийРегистр()
        когда "check_bin"
            СтатусВыполнения = АнализироватьСписокИзмененныхОбъектов(1)
        когда "reapair_bin"
            СтатусВыполнения = АнализироватьСписокИзмененныхОбъектов(2)
        когда "new_bin"
            знч ПараметрыПроекта = ИнициализироватьПараметрыПроекта(Ложь)
            СтатусВыполнения = ПеревестиФайлИзмененныхОбъектовВНовыйФормат(ПараметрыПроекта.ПутьКФайламПроекта)
        когда "new_configdumpinfo"
            пер ПараметрыПроекта = ИнициализироватьПараметрыПроекта(Ложь)
            СтатусВыполнения = ПеревестиФайлConfigDumpInfoВНовыйФормат(ПараметрыПроекта.ПутьКФайламПроекта)
            ПараметрыПроекта = ИнициализироватьПараметрыПроекта(Истина)
            для ИмяРасширения из ПараметрыПроекта.Расширения
                знч ПутьКФайламПроекта = ПараметрыПроекта.ПутьКФайламПроекта + СР + "%{ИмяРасширения}"
                СтатусВыполнения = СтатусВыполнения и ПеревестиФайлConfigDumpInfoВНовыйФормат(ПутьКФайламПроекта)
            ;
        когда "get_dumpconfig"
            СтатусВыполнения = ПолучитьDumpСonfig()
        когда "get_prod_dumpconfig"
            СтатусВыполнения = ПолучитьDumpСonfig(Истина)
        когда "update_ib_cf"
            СтатусВыполнения = СобратьФайлыКонфигурации()
            СтатусВыполнения = СтатусВыполнения и ЗагрузитьФайлыКонфигурации()
        когда "update_ib_patch"
            СтатусВыполнения = СобратьПатчКонфигурации()
            СтатусВыполнения = СтатусВыполнения и ЗагрузитьФайлыКонфигурации()
        когда "update_ib_cfe"
            СтатусВыполнения = СобратьФайлыКонфигурации(Истина)
            СтатусВыполнения = СтатусВыполнения и ЗагрузитьФайлыКонфигурации(Истина)
        когда "update_ib_test"
            СтатусВыполнения = ЗагрузитьФайлыКонфигурации(Ложь, Истина)
        когда "build_cf"
            СтатусВыполнения = СобратьФайлыКонфигурации()
        когда "build_cfe"
            СтатусВыполнения = СобратьФайлыКонфигурации(Истина)
        когда "build_patch"
            СтатусВыполнения = СобратьПатчКонфигурации()
        когда "build_prod"
            СтатусВыполнения = СобратьФайлыКонфигурации(Ложь, Истина)
        когда "createconfigfile"
            СтатусВыполнения = СоздатьФайлСНастройками()
        иначе
            Консоль.Записать(
                "Неизвестный режим запуска %Режим\н"
                + "Доступные режимы:\н"
                + "   build_cf - основной режим создания файла расширения cf из файлов выгрузки xml\н"
                + "   build_cfe - основной режим создания файла расширения cfe из файлов выгрузки xml\н"
                + "   build_patch - основной режим создания патча по снятым с поддержки объектам из файлов выгрузки xml\н"
                + "   createconfigfile - создание файла настроек %ИМЯ_ФАЙЛА_НАСТРОЕК по умолчанию\н")
            если Пауза > 0
                Консоль.СчитатьСтроку("Нажмите Enter...")
            ;
            выбросить новый ИсключениеНедопустимоеСостояние()
        ;

    поймать Исключение: Исключение
        если не Исключение.Описание.Пусто()
            Консоль.Записать("\н#################################################################")
            Консоль.Записать(Исключение.Описание)
            Консоль.Записать("#################################################################")
        ;
    ; 

    если СтатусВыполнения
        если Пауза > 0
            Консоль.СчитатьСтроку("\нКонвертация закончена. Нажмите Enter...")
        иначе
            Консоль.Записать("\нКонвертация закончена")
        ;
    иначе
        если Пауза > 0
            Консоль.СчитатьСтроку("\нОшибка конвертации. Нажмите Enter...")
        иначе
            Консоль.Записать("\нОшибка конвертации")
        ;
        выбросить новый ИсключениеНедопустимоеСостояние()
    ;
;

// Конец области. Точка входа

// Область. Команды для работы с проектами

метод СобратьФайлыКонфигурации(СобратьРасширения: Булево = Ложь, ПересобратьКонфигурациюПоставщика: Булево = Ложь) : Булево
    
    знч ПараметрыПроекта = ИнициализироватьПараметрыПроекта(СобратьРасширения)
    знч СР = Файлы.СимволРазделителя

    если ПараметрыПроекта.ПутьКФайламПроекта.Пусто()
        возврат Истина
    ;

    если СобратьРасширения
        для ИмяРасширения из ПараметрыПроекта.Расширения
            знч ПутьКФайламПроекта = ПараметрыПроекта.ПутьКФайламПроекта + СР + "%{ИмяРасширения}"
            ПеревестиФайлConfigDumpInfoВНовыйФормат(ПутьКФайламПроекта)
        ;
    иначе
        ПеревестиФайлConfigDumpInfoВНовыйФормат(ПараметрыПроекта.ПутьКФайламПроекта)
    ;

    знч ХешиПроектов     = ПрочитатьХешиПроектов(ПараметрыПроекта.ПутьКСборкеПроекта)
    знч СобранныеПроекты = новый Массив<Строка>()
    пер ХешПроекта       = ""

    если не СобратьРасширения
        знч ХешСохраненный = ХешиПроектов.PROJECTS.ПолучитьИлиУмолчание(ИМЯ_КОНФИГУРАЦИИ, "")
        ХешПроекта = ПолучитьФайлКонфигурации(ХешСохраненный, ПараметрыПроекта, ПересобратьКонфигурациюПоставщика)
        ХешиПроектов.PROJECTS.Вставить(ИМЯ_КОНФИГУРАЦИИ, ХешПроекта)
        если не ХешПроекта.Пусто() и не ХешПроекта == ХешСохраненный
            СобранныеПроекты.Добавить(ИМЯ_КОНФИГУРАЦИИ)
        ;
    ;

    для ИмяРасширения из ПараметрыПроекта.Расширения
        если не СобратьРасширения
            прервать
        ;
        знч ХешСохраненный = ХешиПроектов.PROJECTS.ПолучитьИлиУмолчание(ИмяРасширения, "")
        ХешПроекта = ПолучитьФайлКонфигурации(ХешСохраненный, ПараметрыПроекта, Ложь, ИмяРасширения, Истина)
        ХешиПроектов.PROJECTS.Вставить(ИмяРасширения, ХешПроекта)
        если не ХешПроекта.Пусто() и не ХешПроекта == ХешСохраненный
            СобранныеПроекты.Добавить(ИмяРасширения)
        ;
    ;

    знч ФайлыСбораны = не ХешПроекта.Пусто()

    если ФайлыСбораны
        ВывестиИнформациюПоСобраннымПроектам(ПараметрыПроекта, ХешиПроектов, СобранныеПроекты)
    ;

    возврат ФайлыСбораны 
;

метод СобратьПатчКонфигурации(): Булево

    знч ПараметрыПроекта    = ИнициализироватьПараметрыПроекта(Ложь)

    если ПараметрыПроекта.ПутьКФайламПроекта.Пусто()
        возврат Истина
    ;

    знч СР                  = Файлы.СимволРазделителя
    знч ХешиПроектов        = ПрочитатьХешиПроектов(ПараметрыПроекта.ПутьКСборкеПроекта)
    знч СобранныеПроекты    = новый Массив<Строка>()
    знч КаталогСборки       = новый Файл(ПараметрыПроекта.ПутьКСборкеПроекта + СР + ИМЯ_ПАТЧА)
    знч ДанныеДляОбновления = новый Соответствие<Строка,Строка>()

    если КаталогСборки.Существует()
        Файлы.Удалить(КаталогСборки, Истина)
    ;

    ПолучитьПатчКонфигурации(ПараметрыПроекта, КаталогСборки.Путь, ДанныеДляОбновления)
    
    знч ФайлыДляЗагрузки    = новый Файл(ПараметрыПроекта.ПутьКСборкеПроекта + СР + ИМЯ_ПАТЧА + "_in")
    ФайлыДляЗагрузки.ОткрытьПотокЗаписи().Записать(ДанныеДляОбновления["ТекстФайлыДляЗагрузки"]).Закрыть()
        
    знч ФайлыДляВыгрузки    = новый Файл(ПараметрыПроекта.ПутьКСборкеПроекта + СР + ИМЯ_ПАТЧА + "_out")
    ФайлыДляВыгрузки.ОткрытьПотокЗаписи().Записать(ДанныеДляОбновления["ТекстФайлыДляВыгрузки"]).Закрыть()
    
    знч ХешПроекта = РасчитатьХешПроекта(КаталогСборки.Путь)
    
    знч ХешСохраненный = ХешиПроектов.PROJECTS.ПолучитьИлиУмолчание(ИМЯ_ПАТЧА, "")
    ХешиПроектов.PROJECTS.Вставить(ИМЯ_ПАТЧА, ХешПроекта)
    если не ХешПроекта.Пусто() и не ХешПроекта == ХешСохраненный
        СобранныеПроекты.Добавить(ИМЯ_ПАТЧА)
    ;

    знч ПатчСборан = не ХешПроекта.Пусто()

    если ПатчСборан
        ВывестиИнформациюПоСобраннымПроектам(ПараметрыПроекта, ХешиПроектов, СобранныеПроекты)
    ;

    возврат ПатчСборан

;

метод ЗагрузитьФайлыКонфигурации(ЗагрузитьРасширения: Булево = Ложь, ПолучитьКонфигурациюПоставщика: Булево = Ложь) : Булево

    знч ПараметрыПроекта = ИнициализироватьПараметрыПроекта(Ложь)

    знч ХешиПроектов     = ПрочитатьХешиПроектов(ПараметрыПроекта.ПутьКСборкеПроекта, Истина)
    знч СтрокаСоединения = ХешиПроектов.IB_CONNECTION_STRING
    знч ИмяПользователя  = ХешиПроектов.IB_LOGIN
    знч Пароль           = ХешиПроектов.IB_PASSWD

    если СтрокаСоединения.Пусто()
        Консоль.Записать("Не заполнен путь к ИБ в файле хэша ProjectsHash.json")
        возврат Ложь
    ;

    если ЗагрузитьРасширения
        ЗагрузитьРасширения(ПараметрыПроекта, СтрокаСоединения, ИмяПользователя, Пароль)
    иначе
        ЗагрузитьПатчКонфигурации(ПараметрыПроекта, СтрокаСоединения, ИмяПользователя, Пароль, ПолучитьКонфигурациюПоставщика)
    ;

    возврат Истина
;

метод ПолучитьФайлКонфигурации(ХешСохраненный: Строка, ПараметрыПроекта: ПараметрыПроекта, ПересобратьКонфигурациюПоставщика: Булево = Ложь, ИмяРасширения: Строка = "", ЭтоРасширение: Булево = Ложь): Строка

    знч СР = Файлы.СимволРазделителя
    знч ИсполняемыйФайлПлатформы = ПараметрыПроекта.ИсполняемыйФайлПлатформы
    знч ПутьКФайламПроекта       = ПараметрыПроекта.ПутьКФайламПроекта + СР + (ЭтоРасширение ? "%{ИмяРасширения}" : "")
    знч РасширениеФайлаСборки    = ЭтоРасширение ? "cfe" : "cf"
    знч ПутьКФайлуСборки         = ПараметрыПроекта.ПутьКСборкеПроекта + СР + (ЭтоРасширение ? "%{ИмяРасширения}.%{РасширениеФайлаСборки}" : "1Cv8.%{РасширениеФайлаСборки}")
    знч ПутьВременнойБазы        = Файлы.СоздатьВременныйКаталог().Путь

    пер ХешПроекта = РасчитатьХешПроекта(ПутьКФайламПроекта)
    если ХешПроекта == ХешСохраненный
        // расширение не изменилось, сборку файла расширения cfe не делаем
        возврат ХешПроекта
    ;

    попытка

        если ПараметрыПроекта.ИспользуетсяАвтономныйСервер
        
            Консоль.Записать("\нCreateInfobaseIbcmd:")
            CreateInfobaseIbcmd(ПутьВременнойБазы,
                ИсполняемыйФайлПлатформы)

            Консоль.Записать("\нLoadFromFilesIbcmd:")   
            LoadFromFilesIbcmd(ПутьКФайламПроекта,
                ПутьВременнойБазы,
                ИсполняемыйФайлПлатформы,
                ИмяРасширения,
                ЭтоРасширение)

            Консоль.Записать("\нDumpIbcmd:")
            DumpIbcmd(ПутьКФайлуСборки,
                ПутьВременнойБазы,
                ИсполняемыйФайлПлатформы,
                ИмяРасширения,
                ЭтоРасширение)

            Консоль.Записать("\нDumpFilesIbcmd:")
            Файлы.Удалить("%{ПутьКФайламПроекта}")
            Файлы.СоздатьКаталог("%{ПутьКФайламПроекта}")
            DumpFilesIbcmd(ПутьКФайламПроекта,
                ПутьВременнойБазы,
                ИсполняемыйФайлПлатформы,
                ИмяРасширения,
                ЭтоРасширение)
            
        иначе
            
            если ПересобратьКонфигурациюПоставщика
                
                знч ПутьВременнойБазыПоставщика = Файлы.СоздатьВременныйКаталог().Путь
                знч ПутьВременнойВыгрузки = Файлы.СоздатьВременныйКаталог().Путь
                знч СтрокаСоединенияПоставщика = СтрокаСоединенияДляФайловойИБ(ПутьВременнойБазыПоставщика)
                пер НастройкиПоискаФайлов = новый НастройкиПоиска()
                        .ИмяСодержит(".cf")
                        .МаксимальнаяГлубина(1)
                        .ИсключитьФайлы(Ложь)
                        .ИсключитьКаталоги(Истина)
                знч ФайлКонфигурации = Файлы.Найти(ПутьКФайламПроекта + "Ext%{СР}ParentConfigurations", НастройкиПоискаФайлов)[0]
                
                Консоль.Записать("\нCreateInfobase:")
                CreateInfobase(СтрокаСоединенияПоставщика,
                    ИсполняемыйФайлПлатформы)
                
                Консоль.Записать("\нLoadFromFile:")
                Load(ФайлКонфигурации.Путь,
                    СтрокаСоединенияПоставщика,
                    ИсполняемыйФайлПлатформы,
                    "",
                    "",
                    ИмяРасширения,
                    ЭтоРасширение)
                
                Консоль.Записать("\нDumpFiles:")
                DumpFiles(ПутьВременнойВыгрузки,
                    СтрокаСоединенияПоставщика,
                    ИсполняемыйФайлПлатформы,
                    "",
                    "",
                    ИмяРасширения,
                    ЭтоРасширение)

                Файлы.Удалить(ПутьВременнойБазыПоставщика)
                Консоль.Записать("ИБ поставщика удалена\н")
                
                Консоль.Записать("\нCreateInfobase:")
                CreateInfobase(СтрокаСоединенияПоставщика,
                    ИсполняемыйФайлПлатформы)
                
                Консоль.Записать("\нLoadFromFiles:")
                LoadFromFiles(ПутьВременнойВыгрузки,
                    СтрокаСоединенияПоставщика,
                    ИсполняемыйФайлПлатформы,
                    "",
                    "",
                    ИмяРасширения,
                    ЭтоРасширение)
               
                знч ФайлыПоИзмененнымОбъектам = ПолучитьФайлыПоИзмененнымОбъектам(ПараметрыПроекта)
 
                для ДанныеОбъекта из ФайлыПоИзмененнымОбъектам
                    если ДанныеОбъекта.Ключ == "ДанныеФайлаИзменений"
                        продолжить
                    ;
        
                    знч ОсновнойФайл        = новый Файл(ДанныеОбъекта.Значение.Получить("ПутьКОсновномуФайлу"))
                    знч ОсновнойФайлТемп    = новый Файл(ПутьВременнойВыгрузки + СР + ОсновнойФайл.Путь.Заменить(ПараметрыПроекта.ПутьКФайламПроекта, ""))

                    если ОсновнойФайлТемп.Существует()
                        Файлы.Удалить(ОсновнойФайлТемп)
                    ;
                    Файлы.Скопировать(ОсновнойФайл, ОсновнойФайлТемп)

                    знч ПутьКОсновномуКаталогу = ДанныеОбъекта.Значение.Получить("ПутьКОсновномуКаталогу")
                    если не ПутьКОсновномуКаталогу.Пусто()
                        знч ОсновнойКаталог     = новый Файл(ПутьКОсновномуКаталогу)
                        знч ОсновнойКаталогТемп = новый Файл(ПутьВременнойВыгрузки + СР + ОсновнойКаталог.Путь.Заменить(ПараметрыПроекта.ПутьКФайламПроекта, ""))
                        если ОсновнойКаталогТемп.Существует()
                            Файлы.Удалить(ОсновнойКаталогТемп)
                        ;
                        Файлы.Скопировать(ПутьКОсновномуКаталогу, ОсновнойКаталогТемп)
                    ;
                ;
                
                Консоль.Записать("\нDump:")
                Файлы.СоздатьКаталог("%{ПутьВременнойВыгрузки}%{СР}Ext%{СР}ParentConfigurations")
                Dump("%{ПутьВременнойВыгрузки}%{СР}Ext%{СР}ParentConfigurations%{СР}%{ФайлКонфигурации.Имя}",
                    СтрокаСоединенияПоставщика,
                    ИсполняемыйФайлПлатформы,
                    "",
                    "",
                    ИмяРасширения,
                    ЭтоРасширение)

                Файлы.Удалить(ПутьВременнойБазыПоставщика)
                Консоль.Записать("ИБ поставщика удалена\н")

                Файлы.Удалить(ПутьКФайламПроекта)
                Файлы.СоздатьКаталог(ПутьКФайламПроекта)
                Файлы.Скопировать(ПутьВременнойВыгрузки, ПутьКФайламПроекта)
                
                Файлы.Удалить(ПутьВременнойВыгрузки)
                Консоль.Записать("Выгрузка поставщика удалена\н")
            ;

            знч СтрокаСоединения = СтрокаСоединенияДляФайловойИБ(ПутьВременнойБазы)

            Консоль.Записать("\нCreateInfobase:")
            CreateInfobase(СтрокаСоединения, ИсполняемыйФайлПлатформы)

            пер МаксимальноеЧислоПопыток  = ЭтоРасширение ? 4 : 1
            пер ВременныйХешПроектаДо     = ХешПроекта
            пер ВременныйХешПроектаПосле  = ХешПроекта
            пер ВременныйХешПроектаЧетный = ХешПроекта

            для ЧислоПопыток = 1 по МаксимальноеЧислоПопыток

                ВременныйХешПроектаДо = ВременныйХешПроектаПосле   

                Консоль.Записать("\нLoadFromFiles:")
                LoadFromFiles(ПутьКФайламПроекта,
                    СтрокаСоединения,
                    ИсполняемыйФайлПлатформы,
                    "",
                    "",
                    ИмяРасширения,
                    ЭтоРасширение)

                Консоль.Записать("\нDumpFiles:")
                Файлы.Удалить(ПутьКФайламПроекта)
                Файлы.СоздатьКаталог(ПутьКФайламПроекта)

                DumpFiles(ПутьКФайламПроекта,
                    СтрокаСоединения, ИсполняемыйФайлПлатформы,
                    "",
                    "",
                    ИмяРасширения,
                    ЭтоРасширение)

                ПеревестиФайлConfigDumpInfoВНовыйФормат(ПутьКФайламПроекта)
                если не ЭтоРасширение
                    ПеревестиФайлИзмененныхОбъектовВНовыйФормат(ПутьКФайламПроекта)
                ;

                ВременныйХешПроектаПосле = РасчитатьХешПроекта(ПутьКФайламПроекта)

                если не ЭтоРасширение или ВременныйХешПроектаПосле == ВременныйХешПроектаДо
                    или ВременныйХешПроектаПосле == ВременныйХешПроектаЧетный
                    // Вторая проврека нужна из-за ошибки выгрузки ролей в расширениях
                    ХешПроекта = ВременныйХешПроектаПосле
                    прервать
                иначе
                    Консоль.Записать("\н*****************************************************************")
                    Консоль.Записать("Повторная выгрузка репозитория")
                    Консоль.Записать("*****************************************************************")
                ;

                если ЧислоПопыток % 2 == 0
                    ВременныйХешПроектаЧетный = ВременныйХешПроектаПосле
                ;
            ;

            если ЭтоРасширение
                и не ВременныйХешПроектаПосле == ВременныйХешПроектаДо
                и не ВременныйХешПроектаПосле == ВременныйХешПроектаЧетный
                выбросить новый ИсключениеНедопустимоеСостояние("Ошибка выгрузки проекта")
            ;

            Консоль.Записать("\нDump:")
            Dump(ПутьКФайлуСборки,
                СтрокаСоединения,
                ИсполняемыйФайлПлатформы,
                "",
                "",
                ИмяРасширения,
                ЭтоРасширение)
                
       ;

    поймать Исключение: Исключение
        если не Исключение.Описание.Пусто()
            Консоль.Записать("\н#################################################################")
            Консоль.Записать(Исключение.Описание)
            Консоль.Записать("#################################################################")
        ;
        ХешПроекта = ""
    ;  
    
    Файлы.Удалить(ПутьВременнойБазы)
    Консоль.Записать("Временная ИБ удалена\н")

    возврат ХешПроекта
;

метод ПолучитьПатчКонфигурации(ПараметрыПроекта: ПараметрыПроекта, ПутьККаталогуПатча: Строка, ДанныеДляОбновления: Соответствие<Строка, Строка>)

    знч СР = Файлы.СимволРазделителя
    пер ТекстФайлыДляЗагрузки = ""
    пер ТекстФайлыДляВыгрузки = ""
    
    попытка

        знч ФайлыПоИзмененнымОбъектам = ПолучитьФайлыПоИзмененнымОбъектам(ПараметрыПроекта)

        для ДанныеОбъекта из ФайлыПоИзмененнымОбъектам
            если ДанныеОбъекта.Ключ == "ДанныеФайлаИзменений"
                продолжить
            ;

            знч ОсновнойФайл        = новый Файл(ДанныеОбъекта.Значение.Получить("ПутьКОсновномуФайлу"))
            знч ОсновнойФайлТемп    = новый Файл(ПутьККаталогуПатча + СР + ОсновнойФайл.Путь.Заменить(ПараметрыПроекта.ПутьКФайламПроекта, ""))

            если ОсновнойФайлТемп.Существует()
                Файлы.Удалить(ОсновнойФайлТемп)
            ;
            Файлы.Скопировать(ОсновнойФайл, ОсновнойФайлТемп)
            если ОсновнойФайл.Имя == "Configuration.xml"
                знч ФайлConfigDumpInfo = новый Файл(ОсновнойФайл.Путь.Заменить("Configuration.xml", "ConfigDumpInfo.xml"))
                знч ФайлConfigDumpInfoТемп = новый Файл(ОсновнойФайлТемп.Путь.Заменить("Configuration.xml", "ConfigDumpInfo.xml"))
                Файлы.Скопировать(ФайлConfigDumpInfo, ФайлConfigDumpInfoТемп)
            ;

            знч ПутьКОсновномуКаталогу = ДанныеОбъекта.Значение.Получить("ПутьКОсновномуКаталогу")
            если не ПутьКОсновномуКаталогу.Пусто()
                знч ОсновнойКаталог     = новый Файл(ПутьКОсновномуКаталогу)
                знч ОсновнойКаталогТемп = новый Файл(ПутьККаталогуПатча + СР + ОсновнойКаталог.Путь.Заменить(ПараметрыПроекта.ПутьКФайламПроекта, ""))
                если ОсновнойКаталогТемп.Существует()
                    Файлы.Удалить(ОсновнойКаталогТемп)
                ;
                Файлы.Скопировать(ПутьКОсновномуКаталогу, ОсновнойКаталогТемп)
                если ОсновнойФайл.Имя == "Configuration.xml"
                    знч НастройкиПоиска = новый НастройкиПоиска()
                        .ИмяСодержит(".cf")
                    знч ФайлыКонфигурации = Файлы.Найти(ОсновнойКаталогТемп.Путь + СР + "ParentConfigurations", НастройкиПоиска)
                    для ФайлКонфигурации из ФайлыКонфигурации
                        Файлы.Удалить(ФайлКонфигурации)
                    ;
                ;
            ;

            ТекстФайлыДляЗагрузки = ТекстФайлыДляЗагрузки + ОсновнойФайлТемп.Путь + Символы.НОВАЯ_СТРОКА
            если ДанныеОбъекта.Ключ.НачинаетсяС("Configuration")
                ТекстФайлыДляЗагрузки = ТекстФайлыДляЗагрузки + ПутьККаталогуПатча + СР + "Ext" + СР + "ParentConfigurations.bin" + Символы.НОВАЯ_СТРОКА
                ТекстФайлыДляВыгрузки = ТекстФайлыДляВыгрузки + ДанныеОбъекта.Ключ + ".ParentConfigurations" + Символы.НОВАЯ_СТРОКА
            ;
        ;

    поймать Исключение: Исключение
        если не Исключение.Описание.Пусто()
            Консоль.Записать("\н#################################################################")
            Консоль.Записать(Исключение.Описание)
            Консоль.Записать("#################################################################")
        ;
    ;

    ДанныеДляОбновления.Вставить("ТекстФайлыДляЗагрузки", ТекстФайлыДляЗагрузки)
    ДанныеДляОбновления.Вставить("ТекстФайлыДляВыгрузки", ТекстФайлыДляВыгрузки)

;

метод ЗагрузитьРасширения(ПараметрыПроекта: ПараметрыПроекта, СтрокаСоединения: Строка, ИмяПользователя: Строка, Пароль: Строка)

    знч СР = Файлы.СимволРазделителя

    для ИмяРасширения из ПараметрыПроекта.Расширения
        знч ФайлДляЗагрузки  = новый Файл(ПараметрыПроекта.ПутьКСборкеПроекта + СР + ИмяРасширения + ".cfe")
        если не ФайлДляЗагрузки.Существует()
            Консоль.Записать(ФайлДляЗагрузки.Путь)
            продолжить
        ;
        Load(ФайлДляЗагрузки.Путь,
            СтрокаСоединения,
            ПараметрыПроекта.ИсполняемыйФайлПлатформы,
            ИмяПользователя,
            Пароль,
            ИмяРасширения,
            Истина)
    ;

;

метод ЗагрузитьПатчКонфигурации(ПараметрыПроекта: ПараметрыПроекта, СтрокаСоединения: Строка, ИмяПользователя: Строка, Пароль: Строка, ПолучитьКонфигурациюПоставщика: Булево = Ложь)

    знч СР = Файлы.СимволРазделителя
    
    знч КаталогДляЗагрузки  = новый Файл(ПараметрыПроекта.ПутьКСборкеПроекта + СР + ИМЯ_ПАТЧА)
    знч ФайлыДляЗагрузки    = новый Файл(ПараметрыПроекта.ПутьКСборкеПроекта + СР + ИМЯ_ПАТЧА + "_in")
    знч ФайлыДляВыгрузки    = новый Файл(ПараметрыПроекта.ПутьКСборкеПроекта + СР + ИМЯ_ПАТЧА + "_out")

    если не КаталогДляЗагрузки.Существует()
        или не ФайлыДляЗагрузки.Существует()
        или не ФайлыДляВыгрузки.Существует()
        возврат
    ;

    знч КаталогДляВыгрузки  = Файлы.СоздатьВременныйКаталог()

    знч НастройкиПоискаФайлов = новый НастройкиПоиска()
            .ИмяСодержит(".cf")
            .МаксимальнаяГлубина(1)
            .ИсключитьФайлы(Ложь)
            .ИсключитьКаталоги(Истина)
    пер ФайлПоставщика = Файлы.Найти(ПараметрыПроекта.ПутьКФайламПроекта + "%{СР}Ext%{СР}ParentConfigurations", НастройкиПоискаФайлов)

    пер ПутьКФайлуПоставщика = ""

    если (ФайлПоставщика.Пусто()
        или ПолучитьКонфигурациюПоставщика)
        DumpFiles(КаталогДляВыгрузки.Путь,
            СтрокаСоединения,
            ПараметрыПроекта.ИсполняемыйФайлПлатформы,
            ИмяПользователя,
            Пароль,
            "",
            Ложь,
            Ложь,
            ФайлыДляВыгрузки)
        ФайлПоставщика = Файлы.Найти(КаталогДляВыгрузки.Путь + "%{СР}Ext%{СР}ParentConfigurations", НастройкиПоискаФайлов)
        ПутьКФайлуПоставщика = ФайлПоставщика[0].Путь.Заменить(КаталогДляВыгрузки.Путь, КаталогДляЗагрузки.Путь)
    иначе
        ПутьКФайлуПоставщика = ФайлПоставщика[0].Путь.Заменить(ПараметрыПроекта.ПутьКФайламПроекта, КаталогДляЗагрузки.Путь)
    ;
    Файлы.Скопировать(ФайлПоставщика[0], ПутьКФайлуПоставщика)

    Консоль.Записать("\нLoadFromFiles:")
    LoadFromFiles(КаталогДляЗагрузки.Путь,
        СтрокаСоединения,
        ПараметрыПроекта.ИсполняемыйФайлПлатформы,
        ИмяПользователя,
        Пароль,
        "",
        Ложь,
        ФайлыДляЗагрузки)

    Консоль.Записать("\нCompareCfg:")
    CompareCfg(ПараметрыПроекта.ПутьКСборкеПроекта + СР + "ИзмененияВКонфигурации.mxl",
        СтрокаСоединения,
        ПараметрыПроекта.ИсполняемыйФайлПлатформы,
        ИмяПользователя,
        Пароль)

    Файлы.Удалить(КаталогДляВыгрузки, Истина)    
    Файлы.Удалить(ПутьКФайлуПоставщика, Истина)

;

метод ЗагрузитьКонфигурацию()
;

метод ПеревестиФайлИзмененныхОбъектовВНовыйФормат(ПутьКФайламПроекта: Строка) : Булево

    знч СР = Файлы.СимволРазделителя
    знч ФайлИзменений   = новый Файл("%{ПутьКФайламПроекта}%{СР}Ext%{СР}ParentConfigurations.bin")
    пер ДанныеИзменения = ФайлИзменений.ОткрытьПотокЧтения().ПрочитатьКакСтроку()

    если ДанныеИзменения.Содержит(Символы.НОВАЯ_СТРОКА)
        возврат Истина
    ;
    ДанныеИзменения = ДанныеИзменения.Заменить(",", "," + Символы.НОВАЯ_СТРОКА)

    ФайлИзменений.ОткрытьПотокЗаписи(Ложь).Записать(Байты{EF BB BF}).Записать(ДанныеИзменения).Закрыть()
    Консоль.Записать("\нИзменен файл %{ПутьКФайламПроекта}%{СР}Ext%{СР}ParentConfigurations.bin")

    возврат Истина
;

метод ПеревестиФайлConfigDumpInfoВНовыйФормат(ПутьКФайламПроекта: Строка) : Булево

    знч СР              = Файлы.СимволРазделителя
    знч ФайлИзменений   = новый Файл("%{ПутьКФайламПроекта}%{СР}ConfigDumpInfo.xml")
    пер ДанныеИзменения = ФайлИзменений.ОткрытьПотокЧтения().ПрочитатьКакСтроку()
    знч ОбразецЗамены   = новый Образец("configVersion=\".*\"")

    ДанныеИзменения = ДанныеИзменения.Заменить(ОбразецЗамены, "configVersion=\"0000000000000000000000000000000000000000\"")

    ФайлИзменений.ОткрытьПотокЗаписи(Ложь).Записать(Байты{EF BB BF}).Записать(ДанныеИзменения).Закрыть()
    Консоль.Записать("\нИзменен файл %{ПутьКФайламПроекта}%{СР}ConfigDumpInfo.xml")

    возврат Истина
;

метод АнализироватьСписокИзмененныхОбъектов(РежимАнализа = 0) : Булево

    знч СР               = Файлы.СимволРазделителя
    знч ПараметрыПроекта = ИнициализироватьПараметрыПроекта(Ложь)

    знч ФайлИзменений = новый Файл("%{ПараметрыПроекта.ПутьКФайламПроекта}%{СР}Ext%{СР}ParentConfigurations.bin")
    знч ДанныеИзменения = ФайлИзменений.ОткрытьПотокЧтения().ПрочитатьКакСтроку().Разделить("," + Символы.НОВАЯ_СТРОКА,Истина)
    
    знч ИсправленныеДанныеИзменения = новый Массив<Строка>()

    знч КоличествоДанныхИзменения = ДанныеИзменения.Размер()
    знч Граница = КоличествоДанныхИзменения - 15
    пер Индекс  = 0

    знч ФайлConfigDumpInfo = новый Файл(ПараметрыПроекта.ПутьКФайламПроекта + "%{СР}ConfigDumpInfo.xml")
    если не ФайлConfigDumpInfo.Существует()
        ПолучитьDumpСonfig()
    ;
    если РежимАнализа > 0
        ПолучитьDumpСonfig(Истина)
    ;
    знч ДанныеConfigDumpInfo     = ПрочитатьConfigDumpInfo(ПараметрыПроекта.ПутьКФайламПроекта)
    знч ДанныеConfigDumpInfoProd = ПрочитатьConfigDumpInfo(ПараметрыПроекта.ПутьКСборкеПроекта)

    пока Истина
        если Индекс <= 9
            ИсправленныеДанныеИзменения.Добавить(ДанныеИзменения[Индекс])
        иначе если Индекс >= Граница
            ИсправленныеДанныеИзменения.Добавить(ДанныеИзменения[Индекс])
        иначе если (Индекс - 10)%4 > 0
            // ни чего не выполняем
        иначе если не ДанныеConfigDumpInfo.СодержитКлюч(ДанныеИзменения[Индекс + 2])
            если РежимАнализа > 0 и ДанныеConfigDumpInfoProd.СодержитКлюч(ДанныеИзменения[Индекс + 3])
                Консоль.Записать("\н*****************************************************************")
                Консоль.Записать("Ошибка идентификаторов bin")
                Консоль.Записать(ДанныеИзменения[Индекс + 2] + "," + ДанныеИзменения[Индекс + 3])
                Консоль.Записать("*****************************************************************")
            ;
        иначе если не ДанныеИзменения[Индекс + 2] == ДанныеИзменения[Индекс + 3]
            знч ИмяОБъекта = ДанныеConfigDumpInfo[ДанныеИзменения[Индекс + 2]]["Имя"] как Строка
            Консоль.Записать(ИмяОБъекта)
            Консоль.Записать(ДанныеИзменения[Индекс + 2] + "," + ДанныеИзменения[Индекс + 3])
            ИсправленныеДанныеИзменения.Добавить(ДанныеИзменения[Индекс])
            ИсправленныеДанныеИзменения.Добавить(ДанныеИзменения[Индекс + 1])
            ИсправленныеДанныеИзменения.Добавить(ДанныеИзменения[Индекс + 2])
            ИсправленныеДанныеИзменения.Добавить(ДанныеИзменения[Индекс + 3])
        иначе если ДанныеИзменения[Индекс] == "1" или ДанныеИзменения[Индекс + 1] == "1"
            знч ДанныеОБъекта = ДанныеConfigDumpInfo[ДанныеИзменения[Индекс + 2]]
            знч ИмяОбъекта = ДанныеОБъекта["Имя"] как Строка
            Консоль.Записать(ИмяОбъекта)
            Консоль.Записать(ДанныеИзменения[Индекс] + "," + ДанныеИзменения[Индекс + 1] + "," + ДанныеИзменения[Индекс + 2] + "," + ДанныеИзменения[Индекс + 3])
            ИсправленныеДанныеИзменения.Добавить(ДанныеИзменения[Индекс])
            ИсправленныеДанныеИзменения.Добавить(ДанныеИзменения[Индекс + 1])
            ИсправленныеДанныеИзменения.Добавить(ДанныеИзменения[Индекс + 2])
            ИсправленныеДанныеИзменения.Добавить(ДанныеИзменения[Индекс + 3])
        иначе
            ИсправленныеДанныеИзменения.Добавить(ДанныеИзменения[Индекс])
            ИсправленныеДанныеИзменения.Добавить(ДанныеИзменения[Индекс + 1])
            ИсправленныеДанныеИзменения.Добавить(ДанныеИзменения[Индекс + 2])
            ИсправленныеДанныеИзменения.Добавить(ДанныеИзменения[Индекс + 3])
        ;
        Индекс += 1
        если Индекс == КоличествоДанныхИзменения
            прервать
        ;
    ;
   
    если РежимАнализа > 1
        и не ИсправленныеДанныеИзменения.Размер() == КоличествоДанныхИзменения
        ФайлИзменений.ОткрытьПотокЗаписи(Ложь).Записать(Байты{EF BB BF}).Записать(Строки.Соединить(ИсправленныеДанныеИзменения, "," + Символы.НОВАЯ_СТРОКА)).Закрыть()
        Консоль.Записать("\нИзменен файл идентификаторов bin")
    ;

    если РежимАнализа > 0
        Файлы.Удалить("%{ПараметрыПроекта.ПутьКСборкеПроекта}%{СР}ConfigDumpInfo.xml", Истина)
    ;

    возврат Истина 
;

метод ВывестиИнформациюПоСобраннымПроектам(ПараметрыПроекта: ПараметрыПроекта, ХешиПроектов: ХешиПроектов, СобранныеПроекты: Массив<Строка>)
    
    знч СР = Файлы.СимволРазделителя
    
    если не СобранныеПроекты.Пусто()
        Консоль.Записать("Собраны проекты:")
    ;

    для ИмяПроекта из СобранныеПроекты
        Консоль.Записать(ИмяПроекта)
    ;

    исп ПотокЗаписи = новый Файл("%{ПараметрыПроекта.ПутьКСборкеПроекта}%{СР}%ИМЯ_ФАЙЛА_ХЕШЕЙ").ОткрытьПотокЗаписи()
    СериализацияJson.ЗаписатьОбъект(ПотокЗаписи, ХешиПроектов)

;

// Конец области. Команды для работы с проектами

// Область. Команды работы с конфигурацией

метод CreateInfobase(СтрокаСоединения: Строка, ИмяФайлаПлатформы: Строка)

    пер ПараметрыПроцесса = новый Массив<Строка>()
    ПараметрыПроцесса.Добавить("CREATEINFOBASE")
    ПараметрыПроцесса.Добавить(СтрокаСоединения)

    ВыполнитьКомандуПлатформыСОжиданием(ИмяФайлаПлатформы, ПараметрыПроцесса, Ложь)

    Консоль.Записать("ИБ успешно создана")
;

метод CreateInfobaseIbcmd(ПутьБазы: Строка, ИмяФайлаПлатформы: Строка)

    пер ПараметрыПроцесса = новый Массив<Строка>()
    ПараметрыПроцесса.Добавить("infobase")
    ПараметрыПроцесса.Добавить("create")
    ПараметрыПроцесса.Добавить("--db-path")
    ПараметрыПроцесса.Добавить("\"%ПутьБазы\"")
    ПараметрыПроцесса.Добавить("--force")

    ВыполнитьКомандуПлатформыСОжиданием(ИмяФайлаПлатформы, ПараметрыПроцесса, Истина)

    Консоль.Записать("ИБ успешно создана")
;

метод Load(ПутьКФайлуСборки: Строка, СтрокаСоединения: Строка, ИмяФайлаПлатформы: Строка,
            ИмяПользователя: Строка = "", Пароль: Строка = "", ИмяРасширения: Строка, ЭтоРасширение: Булево = Ложь)
    
    пер ПараметрыПроцесса = новый Массив<Строка>()
    ПараметрыПроцесса.Добавить("DESIGNER")
    ПараметрыПроцесса.Добавить("/LoadCfg")
    ПараметрыПроцесса.Добавить("\"%ПутьКФайлуСборки\"")
    если ЭтоРасширение
        ПараметрыПроцесса.Добавить("-Extension")
        ПараметрыПроцесса.Добавить(ИмяРасширения)
    ;
    ПараметрыПроцесса.Добавить("/IBConnectionString")
    ПараметрыПроцесса.Добавить(СтрокаСоединения)
    ПараметрыПроцесса.Добавить("/DisableStartupDialogs")
    ПараметрыПроцесса.Добавить("/WA-")
    если не ИмяПользователя.Пусто()
        ПараметрыПроцесса.Добавить("/N")
        ПараметрыПроцесса.Добавить("\"%ИмяПользователя\"")
    ;
    если не Пароль.Пусто()
        ПараметрыПроцесса.Добавить("/P")
        ПараметрыПроцесса.Добавить(Пароль)
    ;

    ВыполнитьКомандуПлатформыСОжиданием(ИмяФайлаПлатформы, ПараметрыПроцесса, Ложь)

    Консоль.Записать("Файл успешно загружен: %ПутьКФайлуСборки")
;

метод LoadFromFiles(ПутьКФайламПроекта: Строка, СтрокаСоединения: Строка, ИмяФайлаПлатформы: Строка,
                    ИмяПользователя: Строка = "", Пароль: Строка = "", ИмяРасширения: Строка, ЭтоРасширение: Булево = Ложь, ФайлыДляЗагрузки: Файл|Неопределено = Неопределено)
    
    пер ПараметрыПроцесса = новый Массив<Строка>()

    ПараметрыПроцесса.Добавить("DESIGNER")
    ПараметрыПроцесса.Добавить("/LoadConfigFromFiles")
    ПараметрыПроцесса.Добавить("\"%ПутьКФайламПроекта\"")
    если ЭтоРасширение
        ПараметрыПроцесса.Добавить("-Extension")
        ПараметрыПроцесса.Добавить(ИмяРасширения)
    ;
    если не ФайлыДляЗагрузки == Неопределено
        ПараметрыПроцесса.Добавить("-listFile")
        ПараметрыПроцесса.Добавить((ФайлыДляЗагрузки как Файл).Путь)
        ПараметрыПроцесса.Добавить("-NoCheck ")
    ;
    ПараметрыПроцесса.Добавить("/IBConnectionString")
    ПараметрыПроцесса.Добавить(СтрокаСоединения)
    ПараметрыПроцесса.Добавить("/DisableStartupDialogs")
    ПараметрыПроцесса.Добавить("/WA-")
    если не ИмяПользователя.Пусто()
        ПараметрыПроцесса.Добавить("/N")
        ПараметрыПроцесса.Добавить("\"%ИмяПользователя\"")
    ;
    если не Пароль.Пусто()
        ПараметрыПроцесса.Добавить("/P")
        ПараметрыПроцесса.Добавить(Пароль)
    ;

    ВыполнитьКомандуПлатформыСОжиданием(ИмяФайлаПлатформы, ПараметрыПроцесса, Ложь)

    Консоль.Записать("XML файлы успешно загружены в ИБ")
;

метод LoadFromFilesIbcmd(ПутьКФайламПроекта: Строка, ПутьБазы: Строка, ИмяФайлаПлатформы: Строка,
                        ИмяРасширения: Строка, ЭтоРасширение: Булево = Ложь)
    
    пер ПараметрыПроцесса = новый Массив<Строка>()
    ПараметрыПроцесса.Добавить("infobase")
    ПараметрыПроцесса.Добавить("config")
    ПараметрыПроцесса.Добавить("import")
    ПараметрыПроцесса.Добавить("\"%ПутьКФайламПроекта\"")
    ПараметрыПроцесса.Добавить("--db-path")
    ПараметрыПроцесса.Добавить("\"%ПутьБазы\"")
    если ЭтоРасширение
        ПараметрыПроцесса.Добавить("--extension")
        ПараметрыПроцесса.Добавить(ИмяРасширения)
    ;
    
    ВыполнитьКомандуПлатформыСОжиданием(ИмяФайлаПлатформы, ПараметрыПроцесса, Истина)

    Консоль.Записать("XML файлы успешно загружены в ИБ")
;

метод Dump(ПутьКФайлуСборки: Строка, СтрокаСоединения: Строка, ИмяФайлаПлатформы: Строка,
            ИмяПользователя: Строка = "", Пароль: Строка = "", ИмяРасширения: Строка, ЭтоРасширение: Булево = Ложь)
    
    пер ПараметрыПроцесса = новый Массив<Строка>()
    ПараметрыПроцесса.Добавить("DESIGNER")
    ПараметрыПроцесса.Добавить("/DumpCfg")
    ПараметрыПроцесса.Добавить("\"%ПутьКФайлуСборки\"")
    если ЭтоРасширение
        ПараметрыПроцесса.Добавить("-Extension")
        ПараметрыПроцесса.Добавить(ИмяРасширения)
    ;
    ПараметрыПроцесса.Добавить("/IBConnectionString")
    ПараметрыПроцесса.Добавить(СтрокаСоединения)
    ПараметрыПроцесса.Добавить("/DisableStartupDialogs")
    ПараметрыПроцесса.Добавить("/WA-")
    если не ИмяПользователя.Пусто()
        ПараметрыПроцесса.Добавить("/N")
        ПараметрыПроцесса.Добавить("\"%ИмяПользователя\"")
    ;
    если не Пароль.Пусто()
        ПараметрыПроцесса.Добавить("/P")
        ПараметрыПроцесса.Добавить(Пароль)
    ;

    ВыполнитьКомандуПлатформыСОжиданием(ИмяФайлаПлатформы, ПараметрыПроцесса, Ложь)

    Консоль.Записать("Файл успешно создан: %ПутьКФайлуСборки")
;

метод DumpIbcmd(ПутьКФайлуСборки: Строка, ПутьБазы: Строка, ИмяФайлаПлатформы: Строка, ИмяРасширения: Строка, ЭтоРасширение: Булево = Ложь)

    пер ПараметрыПроцесса = новый Массив<Строка>()
    ПараметрыПроцесса.Добавить("infobase")
    ПараметрыПроцесса.Добавить("config")
    ПараметрыПроцесса.Добавить("save")
    ПараметрыПроцесса.Добавить("\"%ПутьКФайлуСборки\"")
    ПараметрыПроцесса.Добавить("--db-path")
    ПараметрыПроцесса.Добавить("\"%ПутьБазы\"")
    если ЭтоРасширение
        ПараметрыПроцесса.Добавить("--extension")
        ПараметрыПроцесса.Добавить(ИмяРасширения)
    ;
    
    ВыполнитьКомандуПлатформыСОжиданием(ИмяФайлаПлатформы, ПараметрыПроцесса, Истина)

    Консоль.Записать("Файл успешно создан: %ПутьКФайлуСборки")
;

метод DumpFiles(ПутьКФайламПроекта: Строка, СтрокаСоединения: Строка, ИмяФайлаПлатформы: Строка,
            ИмяПользователя: Строка = "", Пароль: Строка = "", ИмяРасширения: Строка, ЭтоРасширение: Булево = Ложь, ТолькоDumpConfig = Ложь, ФайлыДляВыгрузки: Файл|Неопределено = Неопределено)
    
    пер ПараметрыПроцесса = новый Массив<Строка>()
    ПараметрыПроцесса.Добавить("DESIGNER")
    ПараметрыПроцесса.Добавить("/DumpConfigToFiles")
    ПараметрыПроцесса.Добавить("\"%ПутьКФайламПроекта\"")
    если ТолькоDumpConfig
        ПараметрыПроцесса.Добавить("-configDumpInfoOnly")
    ;
    если не ФайлыДляВыгрузки == Неопределено
        ПараметрыПроцесса.Добавить("-listFile")
        ПараметрыПроцесса.Добавить((ФайлыДляВыгрузки как Файл).Путь)
    ;
    если ЭтоРасширение
        ПараметрыПроцесса.Добавить("-Extension")
        ПараметрыПроцесса.Добавить(ИмяРасширения)
    ;
    ПараметрыПроцесса.Добавить("/IBConnectionString")
    ПараметрыПроцесса.Добавить(СтрокаСоединения)
    ПараметрыПроцесса.Добавить("/DisableStartupDialogs")
    ПараметрыПроцесса.Добавить("/WA-")
    если не ИмяПользователя.Пусто()
        ПараметрыПроцесса.Добавить("/N")
        ПараметрыПроцесса.Добавить("\"%ИмяПользователя\"")
    ;
    если не Пароль.Пусто()
        ПараметрыПроцесса.Добавить("/P")
        ПараметрыПроцесса.Добавить(Пароль)
    ;

    ВыполнитьКомандуПлатформыСОжиданием(ИмяФайлаПлатформы, ПараметрыПроцесса, Ложь)

    Консоль.Записать("XML файлы успешно выгружены: %ПутьКФайламПроекта")
;

метод DumpFilesIbcmd(ПутьКФайламПроекта: Строка, ПутьБазы: Строка, ИмяФайлаПлатформы: Строка, ИмяРасширения: Строка, ЭтоРасширение: Булево = Ложь)

    пер ПараметрыПроцесса = новый Массив<Строка>()
    ПараметрыПроцесса.Добавить("infobase")
    ПараметрыПроцесса.Добавить("config")
    ПараметрыПроцесса.Добавить("export")
    ПараметрыПроцесса.Добавить("\"%ПутьКФайламПроекта\"")
    ПараметрыПроцесса.Добавить("--db-path")
    ПараметрыПроцесса.Добавить("\"%ПутьБазы\"")
    если ЭтоРасширение
        ПараметрыПроцесса.Добавить("--extension")
        ПараметрыПроцесса.Добавить(ИмяРасширения)
    ;
    
    ВыполнитьКомандуПлатформыСОжиданием(ИмяФайлаПлатформы, ПараметрыПроцесса, Истина)

    Консоль.Записать("XML файлы успешно выгружены: %ПутьКФайламПроекта")
;

метод CompareCfg(ПутьКФайлуОтчета: Строка, СтрокаСоединения: Строка, ИмяФайлаПлатформы: Строка,
                    ИмяПользователя: Строка = "", Пароль: Строка = "")
    
    пер ПараметрыПроцесса = новый Массив<Строка>()

    ПараметрыПроцесса.Добавить("DESIGNER")
    ПараметрыПроцесса.Добавить("/IBConnectionString")
    ПараметрыПроцесса.Добавить(СтрокаСоединения)
    ПараметрыПроцесса.Добавить("/DisableStartupDialogs")
    ПараметрыПроцесса.Добавить("/WA-")
    если не ИмяПользователя.Пусто()
        ПараметрыПроцесса.Добавить("/N")
        ПараметрыПроцесса.Добавить("\"%ИмяПользователя\"")
    ;
    если не Пароль.Пусто()
        ПараметрыПроцесса.Добавить("/P")
        ПараметрыПроцесса.Добавить(Пароль)
    ;

    ПараметрыПроцесса.Добавить("/CompareCfg")
    ПараметрыПроцесса.Добавить("-FirstConfigurationType")
    ПараметрыПроцесса.Добавить("MainConfiguration")
    ПараметрыПроцесса.Добавить("-SecondConfigurationType")
    ПараметрыПроцесса.Добавить("DBConfiguration")
    ПараметрыПроцесса.Добавить("-ReportType")
    ПараметрыПроцесса.Добавить("Full")
    ПараметрыПроцесса.Добавить("-IncludeChangedObjects")
    ПараметрыПроцесса.Добавить("-IncludeDeletedObjects")
    ПараметрыПроцесса.Добавить("-IncludeAddedObjects")
    ПараметрыПроцесса.Добавить("-ReportFormat")
    ПараметрыПроцесса.Добавить("mxl")
    ПараметрыПроцесса.Добавить("-ReportFile")
    ПараметрыПроцесса.Добавить(ПутьКФайлуОтчета)

    ВыполнитьКомандуПлатформыСОжиданием(ИмяФайлаПлатформы, ПараметрыПроцесса, Ложь)

    Консоль.Записать("Файл сравнение основной конфигурации и конфигурации БД успешно получен")
;

// Конец области.  Команды работы с конфигурацией

// Область. Прочее

метод ПолучитьФайлыПоИзмененнымОбъектам(ПараметрыПроекта: ПараметрыПроекта) : Соответствие<Строка, Соответствие<Строка, Строка>>

    знч СР = Файлы.СимволРазделителя

    ПеревестиФайлИзмененныхОбъектовВНовыйФормат(ПараметрыПроекта.ПутьКФайламПроекта)

    знч ФайлИзменений = новый Файл("%{ПараметрыПроекта.ПутьКФайламПроекта}%{СР}Ext%{СР}ParentConfigurations.bin")
    знч ДанныеИзменения = ФайлИзменений.ОткрытьПотокЧтения().ПрочитатьКакСтроку().Разделить("," + Символы.НОВАЯ_СТРОКА,Истина)
    
    знч РасширенныеДанныеИзменения  = новый Массив<Строка>()
    знч ГУИДОбъектовСнятые          = новый Соответствие<Строка, Строка>()
    знч ГУИДОбъектовПоставщика      = новый Соответствие<Строка, Строка>()
    знч ФайлыПоИзмененнымОбъектам   = новый Соответствие<Строка, Соответствие<Строка, Строка>>()

    знч КоличествоДанныхИзменения = ДанныеИзменения.Размер()
    знч Граница = КоличествоДанныхИзменения - 15
    пер Индекс  = 0

    знч ФайлConfigDumpInfo = новый Файл(ПараметрыПроекта.ПутьКФайламПроекта + "%{СР}ConfigDumpInfo.xml")
    если не ФайлConfigDumpInfo.Существует()
        ПолучитьDumpСonfig()
    ;
    знч ДанныеConfigDumpInfo = ПрочитатьConfigDumpInfo(ПараметрыПроекта.ПутьКФайламПроекта)

    пока Истина
        если Индекс <= 9
            // ни чего не выполняем
        иначе если Индекс >= Граница
            // ни чего не выполняем
        иначе если (Индекс - 10)%4 > 0
            // ни чего не выполняем
        иначе если не ДанныеConfigDumpInfo.СодержитКлюч(ДанныеИзменения[Индекс + 2])
            // ни чего не выполняем
        иначе если ДанныеИзменения[Индекс] == "1" или ДанныеИзменения[Индекс + 1] == "1"
            знч ДанныеОБъекта = ДанныеConfigDumpInfo[ДанныеИзменения[Индекс + 2]]
            пер ИмяОбъекта = ДанныеОБъекта["Имя"] как Строка
            Консоль.Записать(ИмяОбъекта)
            Консоль.Записать(ДанныеИзменения[Индекс] + "," + ДанныеИзменения[Индекс + 1] + "," + ДанныеИзменения[Индекс + 2] + "," + ДанныеИзменения[Индекс + 3])
            знч ЗаполненГУИДРодителя = не (ДанныеОБъекта["ГУИДРодителя"] как Строка).Пусто()
            знч ФайлыОбъекта = ПолучитьФайлыОбъектаМетаданных(ПараметрыПроекта.ПутьКФайламПроекта, ИмяОбъекта, ЗаполненГУИДРодителя)
            если ЗаполненГУИДРодителя
                знч СоставИмяОбъекта = ИмяОбъекта.Разделить(".")
                ИмяОбъекта = СоставИмяОбъекта[0] + "." + СоставИмяОбъекта[1]
            ;
            ФайлыПоИзмененнымОбъектам.ВставитьЕслиОтсутствует(ИмяОбъекта, ФайлыОбъекта)
            если (ДанныеОБъекта["ГУИДРодителя"] как Строка).Пусто()
                ГУИДОбъектовСнятые.ВставитьЕслиОтсутствует(ДанныеОБъекта["ГУИД"] как Строка, "")
            иначе
                ГУИДОбъектовСнятые.ВставитьЕслиОтсутствует(ДанныеОБъекта["ГУИДРодителя"] как Строка, "")
            ;
            ГУИДОбъектовПоставщика.ВставитьЕслиОтсутствует(ДанныеИзменения[Индекс + 2], "")
        иначе
            ГУИДОбъектовПоставщика.ВставитьЕслиОтсутствует(ДанныеИзменения[Индекс + 2], "")
        ;
        Индекс += 1
        если Индекс == КоличествоДанныхИзменения
            прервать
        ;
    ;

    Индекс = 0
   
    пока Истина
        если Индекс <= 9
            РасширенныеДанныеИзменения.Добавить(ДанныеИзменения[Индекс])
        иначе если Индекс >= Граница
            РасширенныеДанныеИзменения.Добавить(ДанныеИзменения[Индекс])
        иначе если (Индекс - 10)%4 > 0
            // ни чего не выполняем
        иначе
            если ГУИДОбъектовСнятые.СодержитКлюч(ДанныеИзменения[Индекс + 2])
                РасширенныеДанныеИзменения.Добавить("1")
            иначе
                РасширенныеДанныеИзменения.Добавить(ДанныеИзменения[Индекс])
            ;
            РасширенныеДанныеИзменения.Добавить(ДанныеИзменения[Индекс + 1])
            РасширенныеДанныеИзменения.Добавить(ДанныеИзменения[Индекс + 2])
            РасширенныеДанныеИзменения.Добавить(ДанныеИзменения[Индекс + 3])
        ;
        Индекс += 1
        если Индекс == КоличествоДанныхИзменения
            прервать
        ;
    ;

    для ОбъектКонфигурации из ДанныеConfigDumpInfo
        знч ДанныеОБъекта = ОбъектКонфигурации.Значение
        если не (ДанныеОБъекта["ГУИДРодителя"] как Строка).Пусто()
            продолжить
        ;
        если не ГУИДОбъектовПоставщика.СодержитКлюч((ДанныеОБъекта["ГУИД"] как Строка))
            знч ИмяОбъекта = (ДанныеОБъекта["Имя"] как Строка)
            Консоль.Записать(ИмяОбъекта)
            Консоль.Записать("Объект не на поддержке")
            знч ФайлыОбъекта = ПолучитьФайлыОбъектаМетаданных(ПараметрыПроекта.ПутьКФайламПроекта, ИмяОбъекта)
            ФайлыПоИзмененнымОбъектам.ВставитьЕслиОтсутствует(ИмяОбъекта, ФайлыОбъекта)
        ;
    ;

    знч ДанныеФайлаИзменений = новый Соответствие<Строка, Строка>()
    ДанныеФайлаИзменений.Вставить("ФайлИзменений", Строки.Соединить(ДанныеИзменения, "," + Символы.НОВАЯ_СТРОКА))
    ДанныеФайлаИзменений.Вставить("РасширенныйФайлИзменений", Строки.Соединить(РасширенныеДанныеИзменения, "," + Символы.НОВАЯ_СТРОКА))

    ФайлыПоИзмененнымОбъектам.Вставить("ДанныеФайлаИзменений", ДанныеФайлаИзменений)

    возврат ФайлыПоИзмененнымОбъектам 
;

метод ПолучитьDumpСonfig(ДляКонфигурацииПоставщика = Ложь) : Булево

    знч СР               = Файлы.СимволРазделителя
    знч ПараметрыПроекта = ИнициализироватьПараметрыПроекта(Ложь)

    если ДляКонфигурацииПоставщика

        знч ПутьВременнойБазыПоставщика = Файлы.СоздатьВременныйКаталог().Путь
        знч СтрокаСоединенияПоставщика = СтрокаСоединенияДляФайловойИБ(ПутьВременнойБазыПоставщика)
        пер НастройкиПоискаФайлов = новый НастройкиПоиска()
            .ИмяСодержит(".cf")
            .МаксимальнаяГлубина(1)
            .ИсключитьФайлы(Ложь)
            .ИсключитьКаталоги(Истина)
        знч ПутьКФайлу = Файлы.Найти(ПараметрыПроекта.ПутьКФайламПроекта + "%{СР}Ext%{СР}ParentConfigurations", НастройкиПоискаФайлов)[0].Путь
       
        Консоль.Записать("\нCreateInfobase:")
        CreateInfobase(СтрокаСоединенияПоставщика,
            ПараметрыПроекта.ИсполняемыйФайлПлатформы)
        
        Консоль.Записать("\нLoadFromFile:")
        Load(ПутьКФайлу,
            СтрокаСоединенияПоставщика,
            ПараметрыПроекта.ИсполняемыйФайлПлатформы,
            "",
            "",
            "",
            Ложь)

        Консоль.Записать("\нDumpFiles:")
        DumpFiles(ПараметрыПроекта.ПутьКСборкеПроекта,
            СтрокаСоединенияПоставщика,
            ПараметрыПроекта.ИсполняемыйФайлПлатформы,
            "",
            "",
            "",
            Ложь,
            Истина)

        Файлы.Удалить(ПутьВременнойБазыПоставщика)
        Консоль.Записать("ИБ поставщика удалена\н")

    иначе

        знч ХешиПроектов = ПрочитатьХешиПроектов(ПараметрыПроекта.ПутьКСборкеПроекта, Истина)
        знч СтрокаСоединения = ХешиПроектов.IB_CONNECTION_STRING
        знч ИмяПользователя  = ХешиПроектов.IB_LOGIN
        знч Пароль           = ХешиПроектов.IB_PASSWD

        если СтрокаСоединения.Пусто()
          Консоль.Записать("Не заполнен путь к ИБ в файле хэша ProjectsHash.json")
          возврат Ложь
        ;

        Консоль.Записать("\нDumpFiles(Config dump info):")
        DumpFiles(ПараметрыПроекта.ПутьКФайламПроекта,
            СтрокаСоединения,
            ПараметрыПроекта.ИсполняемыйФайлПлатформы,
            ИмяПользователя,
            Пароль,
            "",
            Ложь,
            Истина)
    ;

    возврат Истина
;

метод ПрочитатьConfigDumpInfo(ПутьКФайламПроекта: Строка) : Соответствие<Строка, Соответствие<Строка, Строка|Число>>

    знч СР = Файлы.СимволРазделителя
    знч ConfigDumpInfo = новый Файл("%{ПутьКФайламПроекта}%{СР}ConfigDumpInfo.xml")
    знч ДанныеConfigDumpInfo = новый Соответствие<Строка, Соответствие<Строка, Строка|Число>>()

    если не ConfigDumpInfo.Существует()
        возврат ДанныеConfigDumpInfo
    ;

    пер ЧтениеXml = новый ЧтениеXml(ConfigDumpInfo.ОткрытьПотокЧтения())
    пер Уровень = 0
    пер ГУИДРодителя = ""
    пока ЧтениеXml.Следующий()
        
        если (ЧтениеXml.Имя == "Metadata"
            и ЧтениеXml.ВидУзла == ВидУзлаXml.КонецЭлемента)
            Уровень -= 1
        ;        
        если не (ЧтениеXml.Имя == "Metadata"
            и ЧтениеXml.ВидУзла == ВидУзлаXml.НачалоЭлемента)
            продолжить
        ;

        Уровень += 1

        пер ИмяМетаданных = ЧтениеXml.ЗначениеАтрибута("name") как Строка
        пер ГУИД = ЧтениеXml.ЗначениеАтрибута("id") как Строка

        если ГУИД.Найти(".") > 0
            продолжить
        ;

        если Уровень == 1
            ГУИДРодителя = ГУИД
        ;

        знч ДанныеОбъекта = новый Соответствие<Строка, Строка|Число>()
        ДанныеОбъекта.Вставить("ГУИД",         ГУИД)
        ДанныеОбъекта.Вставить("ГУИДРодителя", ГУИДРодителя == ГУИД ? "" : ГУИД)
        ДанныеОбъекта.Вставить("Имя",          ИмяМетаданных)
        ДанныеОбъекта.Вставить("Уровень",      Уровень)

        ДанныеConfigDumpInfo.Вставить(ГУИД, ДанныеОбъекта)

    ;

    возврат ДанныеConfigDumpInfo
;

метод СоздатьФайлСНастройками() : Булево
    
    знч СР = Файлы.СимволРазделителя
    пер ФайлНастроек = новый Файл(ИМЯ_ФАЙЛА_НАСТРОЕК)
    исп ПотокЗаписи = ФайлНастроек.ОткрытьПотокЗаписи()
    знч Настройки = новый Настройки(
        {"%{ИМЯ_КОНФИГУРАЦИИ}", "%{ИМЯ_ПАТЧА}"} как Массив<Строка>,
        "bin",
        "src%{СР}cf",
        "src%{СР}cfe",
        "8.3.22",
        Ложь
    )

    СериализацияJson.ЗаписатьОбъект(ПотокЗаписи, Настройки)

    возврат Истина
;

метод ПрочитатьНастройки(): Настройки

    пер ФайлНастроек = новый Файл(ИМЯ_ФАЙЛА_НАСТРОЕК)
    если не ФайлНастроек.Существует()
        выбросить новый ИсключениеНедопустимоеСостояние("Отсутствует файл настроек ")
    ;
    исп ПотокЧтения = ФайлНастроек.ОткрытьПотокЧтения()
    знч ПрочитанныеНастройки = СериализацияJson.ПрочитатьОбъект(ПотокЧтения, Тип<Настройки>) как Настройки

    возврат ПрочитанныеНастройки 
;

метод ИнициализироватьПараметрыПроекта(СобратьРасширения: Булево) : ПараметрыПроекта

    пер Настройки = ПрочитатьНастройки()
    знч СР = Файлы.СимволРазделителя
    знч РабочийКаталог = Скрипт.ПолучитьРабочийКаталог()
    пер ПутьКСборкеПроекта = РабочийКаталог + СР + Настройки.BIN_DIR
    ПутьКСборкеПроекта = ПутьКСборкеПроекта.Заменить("\\", СР)
    ПутьКСборкеПроекта = ПутьКСборкеПроекта.Заменить("/", СР)
    
    знч ОтносительныйПутьКФайламПроекта = (СобратьРасширения ? Настройки.SRC_CFE : Настройки.SRC_CF)
    пер ПутьКФайламПроекта = ""
     если не ОтносительныйПутьКФайламПроекта.Пусто() 
        ПутьКФайламПроекта = РабочийКаталог + СР + ОтносительныйПутьКФайламПроекта
        ПутьКФайламПроекта = ПутьКФайламПроекта.Заменить("\\", СР)
        ПутьКФайламПроекта = ПутьКФайламПроекта.Заменить("/", СР)
    ;

    Консоль.Записать("ИсполняемыйФайлПлатформы: %{Настройки.PLATFORM_VERSION}")

    знч ИсполняемыйФайлПлатформы = ИсполняемыйФайлПлатформы(Настройки.PLATFORM_VERSION, Настройки.USE_IBCMD)

    знч ПараметрыПроекта = новый ПараметрыПроекта(РабочийКаталог,
        ПутьКСборкеПроекта,
        ПутьКФайламПроекта,
        ИсполняемыйФайлПлатформы,
        Настройки.USE_IBCMD,
        Настройки.EXT_NAMES)
    
    возврат ПараметрыПроекта
;

метод ПрочитатьХешиПроектов(Путь: Строка, ЛогинПароль = Ложь): ХешиПроектов
    
    знч СР = Файлы.СимволРазделителя
    знч ФайлХешей = новый Файл("%{Путь}%{СР}%ИМЯ_ФАЙЛА_ХЕШЕЙ")
    пер ХешиПроектов = новый ХешиПроектов()
    если не ФайлХешей.Существует()
        Файлы.СоздатьКаталог("%{Путь}")
        исп ПотокЗаписи = ФайлХешей.ОткрытьПотокЗаписи()
        СериализацияJson.ЗаписатьОбъект(ПотокЗаписи, ХешиПроектов)
    иначе
        исп ПотокЧтения = ФайлХешей.ОткрытьПотокЧтения()
        ХешиПроектов = СериализацияJson.ПрочитатьОбъект(ПотокЧтения, Тип<ХешиПроектов>) как ХешиПроектов
    ;

    если ЛогинПароль и не ХешиПроектов.IB_CONNECTION_STRING.Пусто() и ХешиПроектов.IB_LOGIN.Пусто()
        ХешиПроектов.IB_LOGIN = Консоль.СчитатьСтроку("Введите логин:\н")
    ;

    если ЛогинПароль и не ХешиПроектов.IB_LOGIN.Пусто() и ХешиПроектов.IB_PASSWD.Пусто()
        ХешиПроектов.IB_PASSWD = Консоль.СчитатьСтроку("Введите пароль:\н")
    ;

    возврат ХешиПроектов
;

метод РасчитатьХешПроекта(ПутьКФайламПроекта: Строка): Строка

    знч НастройкиПоиска = новый НастройкиПоиска()
    НастройкиПоиска.ИсключитьКаталоги(Истина)
    НастройкиПоиска.ИсключитьСсылки(Истина)
    пер ФайлыПроекта = Файлы.Найти(ПутьКФайламПроекта, НастройкиПоиска)

    пер ХешированиеДанных = новый ХешированиеДанных(АлгоритмХеширования.Md5)
    для Файл из ФайлыПроекта
        ХешированиеДанных.ДобавитьДанные(Файл.ОткрытьПотокЧтения())
    ;

    знч ХешПроекта = ХешированиеДанных.Результат.ВСтроку()

    возврат ХешПроекта

;

метод СтрокаСоединенияДляФайловойИБ(путьКИБ: Строка): Строка
    возврат "\"File=\"\"%путьКИБ\"\"\""
;

метод КодировкаПотокаВыводаПлатформы(): Строка

    возврат "UTF-8"
;

метод ВывестиЛогаИзФайла(файлЛога: Файл, кодировкаЛога: Строка, удалитьЛог: Булево = Ложь)
    
    если не файлЛога.Существует()
        возврат
    ;
    
    исп потокЛога = файлЛога.ОткрытьПотокЧтения()
    знч текстЛога = потокЛога.ПрочитатьКакСтроку(кодировкаЛога)
    пер строкиЛога = текстЛога.Разделить(Символы.НОВАЯ_СТРОКА)
    для строкаЛога из строкиЛога
        если строкаЛога.Пусто()
            продолжить
        ;
        Консоль.Записать(строкаЛога)
    ;

    потокЛога.Закрыть()
    
    если удалитьЛог
        Файлы.Удалить(файлЛога)
    ;
;

метод ПолучитьКодВозвратаИзФайла(файлКодаВозврата: Файл): Число|Строка?
    если не файлКодаВозврата.Существует()
        возврат Неопределено
    ;

    исп потокКодаВозврата = файлКодаВозврата.ОткрытьПотокЧтения()
    пер кодВозврата = потокКодаВозврата.ПрочитатьКакСтроку()
    если кодВозврата.Пусто()
        возврат Неопределено
    ;
    
    если кодВозврата.ТолькоЦифры()
        возврат новый Число(кодВозврата)
    ;
    
    возврат кодВозврата.Подстрока(1)
;

метод ПутьКОбъектуМетаданных(ТипОбъектаМетаданных: Строка) : Строка

    выбор ТипОбъектаМетаданных
    когда "BusinessProcess"
        возврат "BusinessProcesses"
    когда "ChartOfAccounts"
        возврат "ChartsOfAccounts"
    когда "ChartOfCalculationTypes"
        возврат "ChartsOfCalculationTypes"
    когда "ChartOfCharacteristicTypes"
        возврат "ChartsOfCharacteristicTypes"
    когда "FilterCriterion"
        возврат "FilterCriteria"
    когда "Template"
        возврат "FilterCriteria"
    иначе
        возврат "%{ТипОбъектаМетаданных}s"
    ;
;

метод ПолучитьФайлыОбъектаМетаданных(ПутьКФайламПроекта: Строка, ИмяОбъектаМетаданных: Строка, ПолучитьФайлыРодителя = Ложь) : Соответствие<Строка, Строка>

    знч СР = Файлы.СимволРазделителя
    знч ФайлыОбъекта = новый Соответствие<Строка, Строка>()
    знч СоставИмениМетаданных = ИмяОбъектаМетаданных.Разделить(".")
    пер ОсновнойФайлПуть = ""
    пер ОсновнойКаталогПуть = ""

    если СоставИмениМетаданных[0] == "Configuration"
        ОсновнойКаталогПуть = "%{ПутьКФайламПроекта}%{СР}Ext"
        ОсновнойФайлПуть = "%{ПутьКФайламПроекта}%{СР}Configuration.xml"
    иначе если СоставИмениМетаданных[0] == "Subsystem"
        ОсновнойКаталогПуть = "%{ПутьКФайламПроекта}"
        для Индекс = 0 по СоставИмениМетаданных.Размер() - 1
            если Индекс % 2 == 0
                ОсновнойКаталогПуть = ОсновнойКаталогПуть + "%{СР}%{ПутьКОбъектуМетаданных(СоставИмениМетаданных[Индекс])}"
            иначе
                ОсновнойКаталогПуть = ОсновнойКаталогПуть + "%{СР}%{СоставИмениМетаданных[Индекс]}"
            ;
        ;
        ОсновнойФайлПуть = "%{ОсновнойКаталогПуть}.xml"
    иначе
        если СоставИмениМетаданных.Размер() == 2 или ПолучитьФайлыРодителя
            ОсновнойКаталогПуть = "%{ПутьКФайламПроекта}%{СР}%{ПутьКОбъектуМетаданных(СоставИмениМетаданных[0])}%{СР}%{СоставИмениМетаданных[1]}"
        иначе если СоставИмениМетаданных.Размер() == 4
            ОсновнойКаталогПуть = "%{ПутьКФайламПроекта}%{СР}%{ПутьКОбъектуМетаданных(СоставИмениМетаданных[0])}%{СР}%{СоставИмениМетаданных[1]}%{СР}%{ПутьКОбъектуМетаданных(СоставИмениМетаданных[2])}%{СР}%{СоставИмениМетаданных[3]}"
        иначе
            Консоль.Записать("Не определен путь к объекту метаданных: %{ИмяОбъектаМетаданных}")
            выбросить новый ИсключениеНедопустимоеСостояние()
        ;
        ОсновнойФайлПуть = "%{ОсновнойКаталогПуть}.xml"
    ;

    знч ОсновнойФайл = новый Файл(ОсновнойФайлПуть)
    если ОсновнойФайл.Существует()
        ФайлыОбъекта.Вставить("ПутьКОсновномуФайлу", ОсновнойФайл.Путь)
    иначе
        Консоль.Записать(ОсновнойФайлПуть)
        Консоль.Записать("Не существует путь к объекту метаданных: %{ОсновнойФайлПуть}")
        выбросить новый ИсключениеНедопустимоеСостояние()
    ;

    знч ОсновнойКаталог = новый Файл(ОсновнойКаталогПуть)
    если ОсновнойКаталог.Существует() и ОсновнойКаталог.ЯвляетсяКаталогом()
        ФайлыОбъекта.Вставить("ПутьКОсновномуКаталогу", ОсновнойКаталог.Путь)
    иначе если ОсновнойКаталог.Существует() и не ОсновнойКаталог.ЯвляетсяКаталогом()
        Консоль.Записать(ОсновнойФайлПуть)
        Консоль.Записать("Ошибочный путь к каталогу объекта метаданных: %{ОсновнойФайлПуть}")
        выбросить новый ИсключениеНедопустимоеСостояние()
    иначе
        ФайлыОбъекта.Вставить("ПутьКОсновномуКаталогу", "")
    ;

    возврат ФайлыОбъекта
;

// Конец области. Прочее

// Область. Определение пути к платформе

метод ВыполнитьКомандуПлатформыСОжиданием(имяКоманды: Строка, параметры: Массив<Строка>, ИспользуетсяАвтономныйСервер: Булево, таймаут: Длительность = 0с)
    
    знч временныйФайлЛогов = Файлы.СоздатьВременныйФайл()
    знч временныйФайлКодВозврата = Файлы.СоздатьВременныйФайл()
    
    если не ИспользуетсяАвтономныйСервер
        параметры.Добавить("/Out")
        параметры.Добавить(временныйФайлЛогов.Путь)
        параметры.Добавить("/DumpResult")
        параметры.Добавить(временныйФайлКодВозврата.Путь)
    ;
    
    знч параметрыСтрокой = Строки.Соединить(параметры, " ")
    Консоль.Записать("=================================================================")
    Консоль.Записать("\"%имяКоманды\" %параметрыСтрокой")
    Консоль.Записать("=================================================================")
    пер процесс = новый ПроцессОс(имяКоманды, параметры)
    процесс.Запустить()

    пер времяОжидания = 0с
    пер кодВозврата = Неопределено
    
    если ИспользуетсяАвтономныйСервер
        кодВозврата = процесс.ПолучитьКодВозврата()
        знч ТекстЛога = процесс.ПолучитьПотокВывода().ПрочитатьКакСтроку(КодировкаПотокаВыводаПлатформы())
        Консоль.Записать(ТекстЛога)
    иначе

        пока не процесс.ОжидатьЗавершения(60с) и процесс.Живой()
            ВывестиЛогаИзФайла(временныйФайлЛогов, КодировкаПотокаВыводаПлатформы())
            кодВозврата = ПолучитьКодВозвратаИзФайла(временныйФайлКодВозврата)
            
            если кодВозврата != Неопределено
                процесс.ОжидатьЗавершения(10с)
                прервать
            ;

            если таймаут != 0с и таймаут <= времяОжидания
                пер текстОшибки = "При выполнении команды платформы превышено время ожидания выполнения %таймаут"
                процесс.Остановить()
                выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
            ;
            времяОжидания += 60с
        ;
        
        ВывестиЛогаИзФайла(временныйФайлЛогов, КодировкаПотокаВыводаПлатформы(), Истина)
        кодВозврата = ПолучитьКодВозвратаИзФайла(временныйФайлКодВозврата)
        
    ;

    если процесс.Живой()
        процесс.Остановить()
    ;

    если кодВозврата == 0 или кодВозврата == Неопределено
        возврат
    ;

    Консоль.Записать("Код возврата: %кодВозврата")

    выбросить новый ИсключениеНедопустимоеСостояние()
;
   
метод ИсполняемыйФайлПлатформы(ВерсияПлатформы: Строка, ИспользуетсяАвтономныйСервер: Булево): Строка
    
    возврат ИсполняемыйФайлПлатформыПоМаксимальнойСборке(ВерсияПлатформы, ИспользуетсяАвтономныйСервер)
;

метод ИсполняемыйФайлПлатформыПоМаксимальнойСборке(ВерсияПлатформы: Строка, ИспользуетсяАвтономныйСервер: Булево): Строка
    
    знч СР = Файлы.СимволРазделителя
    пер ПутьКПлатформе = ""
    знч используемаяОС = ИспользуемаяОС()
    знч ИсполняемыйФайл = (ИспользуетсяАвтономныйСервер ? "ibcmd" : "1cv8")
    
    если ВерсияПлатформы.ЧислоВхождений(".") == 3
        знч установленныеПлатформы = УстановленныеПлатформы()
        если установленныеПлатформы.СодержитКлюч(ВерсияПлатформы)
            ПутьКПлатформе = установленныеПлатформы.Получить(ВерсияПлатформы)
        ;
    ;

    знч максимальныеПлатформы = МаксимальныеПлатформы()    
    если ВерсияПлатформы.ЧислоВхождений(".") == 2 и максимальныеПлатформы.СодержитКлюч(ВерсияПлатформы)
        ПутьКПлатформе = максимальныеПлатформы.Получить(ВерсияПлатформы)
    ;
    
    пер КлючиВерсий = новый Массив<Строка>(максимальныеПлатформы.Ключи())
    
    если ВерсияПлатформы.Пусто() и не КлючиВерсий.Пусто()
        КлючиВерсий.Сортировать((строка1, строка2) -> строка2.Сравнить(строка1, Истина)) // по убыванию
        ПутьКПлатформе = максимальныеПлатформы.Получить(КлючиВерсий[0])
    ;
    
    если не ПутьКПлатформе.Пусто() и используемаяОС == ОперационныеСистемы.Windows
        возврат "%{ПутьКПлатформе}%{СР}bin%{СР}%{ИсполняемыйФайл}"
    иначе
        возврат "%{ПутьКПлатформе}%{СР}%{ИсполняемыйФайл}"
    ;
    
    знч текстОшибки = "Не найдена установленная платформа %ВерсияПлатформы" 
    выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
    
;

метод УстановленныеПлатформы(): Соответствие<Строка, Строка>
    пер установленныеПлатформы: Соответствие<Строка, Строка>

    знч каталогиПлатформы = КаталогиПлатформы()

    знч настройкиПоискаФайлов = новый НастройкиПоиска()
    настройкиПоискаФайлов.ИсключитьФайлы(Истина)
    настройкиПоискаФайлов.МаксимальнаяГлубина(1)

    для каталогПлатформы из каталогиПлатформы
        попытка
            знч найденныеФайлы = Файлы.Найти(каталогПлатформы, настройкиПоискаФайлов)
            для найденныйФайл из найденныеФайлы
                если не найденныйФайл.Имя.НачинаетсяС("8.3")
                    продолжить
                ;
                установленныеПлатформы.Вставить(найденныйФайл.Имя, найденныйФайл.Путь)
            ;
        поймать Исключение: ИсключениеФайловойСистемы 
            // не обрабатываем отсутствие каталога 1Cv8
        ;
    ;

    возврат установленныеПлатформы
;

метод МаксимальныеПлатформы(): Соответствие<Строка, Строка>
        знч установленныеПлатформы = УстановленныеПлатформы()

    пер максимальныеПлатформы: Соответствие<Строка, Строка>

    для платформа из установленныеПлатформы
        знч разложенныйТекущийРелиз = платформа.Ключ.Разделить(".")

        пер релизБезВерсииМассивом = новый Массив<Строка>(разложенныйТекущийРелиз)
        релизБезВерсииМассивом.УдалитьПоИндексу(3)

        знч релизБезВерсии = Строки.Соединить(релизБезВерсииМассивом, ".")

        если не максимальныеПлатформы.СодержитКлюч(релизБезВерсии)
            максимальныеПлатформы.Вставить(релизБезВерсии, платформа.Значение)
        продолжить
        ;

        знч последнийРелиз = максимальныеПлатформы.Получить(релизБезВерсии)
        знч разложенныйПоследнийРелиз = последнийРелиз.Разделить(".")

        если разложенныйТекущийРелиз[3] > разложенныйПоследнийРелиз[3]
            максимальныеПлатформы.Вставить(релизБезВерсии, платформа.Значение)
        ;
    ;

    возврат максимальныеПлатформы
;

метод ИспользуемаяОС(): ОперационныеСистемы
    знч имяОС = СредаИсполнения.ПолучитьСвойство("os.name")

    выбор когда имяОС.НачинаетсяС("windows", Истина)
        возврат ОперационныеСистемы.Windows

    когда имяОС.Содержит("mac", Истина)
        возврат ОперационныеСистемы.MacOS

    когда имяОС.Содержит("nux", Истина)
        возврат ОперационныеСистемы.Linux

    иначе
        выбросить новый ИсключениеНедопустимоеСостояние("Неизвестная ОС")
    ;
;

метод КаталогиПлатформы(): Массив<Строка>
    
    пер Каталоги: Массив<Строка>
    знч используемаяОС = ИспользуемаяОС()
    знч СР = Файлы.СимволРазделителя

    выбор используемаяОС
    когда ОперационныеСистемы.Windows
        знч Каталог32 = СредаИсполнения.ПолучитьПеременную("ProgramFiles(x86)")
        Каталоги.Добавить("%{Каталог32}%{СР}1Cv8")
        знч Каталог64 = СредаИсполнения.ПолучитьПеременную("ProgramFiles")
        Каталоги.Добавить("%{Каталог64}%{СР}1Cv8")
    когда ОперационныеСистемы.MacOS
        Каталоги.Добавить("%{СР}opt%{СР}1Cv8%{СР}x86_64")
    когда ОперационныеСистемы.Linux
        Каталоги.Добавить("%{СР}opt%{СР}1cv8%{СР}x86_64")
    ;

    возврат Каталоги
;

// Конец области. Определение пути к платформе